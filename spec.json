{
  "openapi" : "3.1.0",
  "info" : {
    "contact" : {
      "email" : "support@cloudquery.io",
      "name" : "CloudQuery Support Team",
      "url" : "https://cloudquery.io"
    },
    "description" : "Welcome to the CloudQuery API documentation! This API can be used to interact with the CloudQuery platform. The API allows you to manage your teams, usage, spend limits, plugins, addons, cloud syncs, and much more.\n\nThe API is secured using bearer tokens. To get started, you can generate an API key from the CloudQuery dashboard. For a step-by-step guide, see: https://docs.cloudquery.io/docs/deployment/generate-api-key.\n\nThe base URL for the API is `https://api.cloudquery.io`.\n",
    "license" : {
      "name" : "MIT",
      "url" : "https://spdx.org/licenses/MIT"
    },
    "termsOfService" : "https://www.cloudquery.io/terms",
    "title" : "CloudQuery OpenAPI Spec",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://api.cloudquery.io"
  } ],
  "security" : [ {
    "bearerAuth" : [ ]
  } ],
  "tags" : [ {
    "name" : "users"
  }, {
    "name" : "teams"
  }, {
    "name" : "plugins"
  }, {
    "name" : "images"
  }, {
    "name" : "healthcheck"
  }, {
    "name" : "addons"
  }, {
    "name" : "registry"
  }, {
    "name" : "syncs"
  }, {
    "name" : "managed-databases"
  } ],
  "paths" : {
    "/" : {
      "get" : {
        "description" : "Health check endpoint, returns 200",
        "operationId" : "HealthCheck",
        "responses" : {
          "200" : {
            "description" : "Response"
          }
        },
        "security" : [ ],
        "tags" : [ "healthcheck" ]
      }
    },
    "/cq-healthcheck" : {
      "get" : {
        "description" : "Health check endpoint, returns 200",
        "operationId" : "CQHealthCheck",
        "responses" : {
          "200" : {
            "description" : "Response"
          }
        },
        "security" : [ ],
        "tags" : [ "healthcheck" ],
        "x-internal" : true
      }
    },
    "/upload/image" : {
      "post" : {
        "description" : "Get a URL to upload image that will be publicly accessible",
        "operationId" : "UploadImage",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImageURL"
                }
              }
            },
            "description" : "Response"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "images" ]
      }
    },
    "/plugin-notification-requests" : {
      "get" : {
        "description" : "List all plugin notification requests",
        "operationId" : "ListPluginNotificationRequests",
        "parameters" : [ {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPluginNotificationRequests_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "post" : {
        "description" : "Create a new plugin notification request.",
        "operationId" : "CreatePluginNotificationRequest",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PluginNotificationRequestCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginNotificationRequest"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugin-notification-requests/{plugin_team}/{plugin_kind}/{plugin_name}" : {
      "delete" : {
        "description" : "Remove plugin notification request for a given plugin.",
        "operationId" : "DeletePluginNotificationRequest",
        "parameters" : [ {
          "$ref" : "#/components/parameters/plugin_team"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "get" : {
        "description" : "Query plugin notification request for a given plugin.",
        "operationId" : "GetPluginNotificationRequest",
        "parameters" : [ {
          "$ref" : "#/components/parameters/plugin_team"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPluginNotificationRequests_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins" : {
      "get" : {
        "description" : "List all plugins",
        "operationId" : "ListPlugins",
        "parameters" : [ {
          "$ref" : "#/components/parameters/plugin_sort_by"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPlugins_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      },
      "post" : {
        "description" : "Create a plugin owned by the specified team. User must be part of that team.",
        "operationId" : "CreatePlugin",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PluginCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Plugin"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}" : {
      "delete" : {
        "description" : "Delete plugin by team and plugin name",
        "operationId" : "DeletePluginByTeamAndPluginName",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "get" : {
        "description" : "Get details about a given plugin.",
        "operationId" : "GetPlugin",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPlugin"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      },
      "patch" : {
        "description" : "Update a plugin",
        "operationId" : "UpdatePlugin",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PluginUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Plugin"
                }
              }
            },
            "description" : "Updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/upcoming-price-changes" : {
      "delete" : {
        "deprecated" : true,
        "description" : "DEPRECATED. Plugin prices are now managed by category. This endpoint will be removed in the near future and currently returns only empty data.",
        "operationId" : "DeletePluginUpcomingPriceChanges",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "get" : {
        "deprecated" : true,
        "description" : "DEPRECATED. Plugin prices are now managed by category. This endpoint will be removed in the near future and currently returns only empty data.",
        "operationId" : "ListPluginUpcomingPriceChanges",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPluginUpcomingPriceChanges_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      },
      "post" : {
        "deprecated" : true,
        "description" : "DEPRECATED. Plugin prices are now managed by category. This endpoint will be removed in the near future and currently returns only empty data.",
        "operationId" : "CreatePluginUpcomingPriceChange",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PluginPriceCreate"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginPrice"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions" : {
      "get" : {
        "description" : "List all versions for a given plugin",
        "operationId" : "ListPluginVersions",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_sort_by"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/include_drafts"
        }, {
          "$ref" : "#/components/parameters/include_prereleases"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPluginVersions_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}" : {
      "get" : {
        "description" : "Get details about a given plugin version.",
        "operationId" : "GetPluginVersion",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginVersionDetails"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      },
      "patch" : {
        "description" : "Update a given plugin version",
        "operationId" : "UpdatePluginVersion",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PluginVersionUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginVersion"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "put" : {
        "description" : "Create a new plugin version, or update a draft version",
        "operationId" : "CreatePluginVersion",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePluginVersion_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginVersion"
                }
              }
            },
            "description" : "Success (the plugin version was updated)"
          },
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginVersion"
                }
              }
            },
            "description" : "Success (the plugin version was created)"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/docs" : {
      "delete" : {
        "description" : "Delete one or more plugin version docs pages.",
        "operationId" : "DeletePluginVersionDocs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeletePluginVersionDocs_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "The resource was deleted successfully."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "get" : {
        "description" : "List all documentation pages for a given plugin version",
        "operationId" : "ListPluginVersionDocs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPluginVersionDocs_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      },
      "post" : {
        "description" : "Replace (override) multiple plugin version docs pages",
        "operationId" : "ReplacePluginVersionDocs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePluginVersionDocs_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePluginVersionDocs_201_response"
                }
              }
            },
            "description" : "Successfully created or updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "put" : {
        "description" : "Create or update one or more plugin version docs pages",
        "operationId" : "CreatePluginVersionDocs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePluginVersionDocs_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePluginVersionDocs_201_response"
                }
              }
            },
            "description" : "Successfully created or updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/tables" : {
      "delete" : {
        "description" : "Delete one or more plugin version tables.",
        "operationId" : "DeletePluginVersionTables",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeletePluginVersionTables_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "The resource was deleted successfully."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "get" : {
        "description" : "List tables for a given plugin version. This only applies to source plugins.",
        "operationId" : "ListPluginVersionTables",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPluginVersionTables_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      },
      "put" : {
        "description" : "Create or update one or more plugin version tables. This only applies to source plugins, and can only be done if the plugin version is in draft.",
        "operationId" : "CreatePluginVersionTables",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePluginVersionTables_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePluginVersionTables_201_response"
                }
              }
            },
            "description" : "Successfully created or updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/tables/{table_name}" : {
      "get" : {
        "description" : "Get schema for a given table and plugin version. This only applies to source plugins.",
        "operationId" : "GetPluginVersionTable",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "table_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginTableDetails"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/assets/{target_name}" : {
      "get" : {
        "description" : "Download an asset for a given plugin version and target",
        "operationId" : "DownloadPluginAsset",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        }, {
          "$ref" : "#/components/parameters/target_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginAsset"
                }
              }
            },
            "description" : "Response"
          },
          "302" : {
            "description" : "Response",
            "headers" : {
              "Location" : {
                "explode" : false,
                "schema" : {
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      },
      "post" : {
        "description" : "Get a URL to upload an asset for a given plugin version and target",
        "operationId" : "UploadPluginAsset",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        }, {
          "$ref" : "#/components/parameters/target_name"
        } ],
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReleaseURL"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/uiassets" : {
      "delete" : {
        "description" : "Remove UI assets for a given plugin version",
        "operationId" : "RemovePluginUIAssets",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "post" : {
        "description" : "Get URLs to upload UI assets for a given plugin version",
        "operationId" : "UploadPluginUIAssets",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UploadPluginUIAssets_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UploadPluginUIAssets_201_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "put" : {
        "description" : "Finalize UI asset upload",
        "operationId" : "FinalizePluginUIAssetUpload",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FinalizePluginUIAssetUpload_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/addons" : {
      "get" : {
        "description" : "List all addons",
        "operationId" : "ListAddons",
        "parameters" : [ {
          "$ref" : "#/components/parameters/addon_sort_by"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListAddons_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "addons" ]
      },
      "post" : {
        "description" : "Create an addon owned by the specified team. User must be part of that team.",
        "operationId" : "CreateAddon",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddonCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Addon"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "addons" ]
      }
    },
    "/addons/{team_name}/{addon_type}/{addon_name}" : {
      "delete" : {
        "description" : "Delete addon by team and addon name",
        "operationId" : "DeleteAddonByTeamAndName",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/addon_type"
        }, {
          "$ref" : "#/components/parameters/addon_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "addons" ],
        "x-internal" : true
      },
      "get" : {
        "description" : "Get details about a given addon.",
        "operationId" : "GetAddon",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/addon_type"
        }, {
          "$ref" : "#/components/parameters/addon_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListAddon"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "addons" ]
      },
      "patch" : {
        "description" : "Update an Addon",
        "operationId" : "UpdateAddon",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/addon_type"
        }, {
          "$ref" : "#/components/parameters/addon_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddonUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Addon"
                }
              }
            },
            "description" : "Updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "addons" ]
      }
    },
    "/addons/{team_name}/{addon_type}/{addon_name}/versions" : {
      "get" : {
        "description" : "List all versions for a given addon",
        "operationId" : "ListAddonVersions",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/addon_type"
        }, {
          "$ref" : "#/components/parameters/addon_name"
        }, {
          "$ref" : "#/components/parameters/version_sort_by"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/include_drafts"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListAddonVersions_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "addons" ]
      }
    },
    "/addons/{team_name}/{addon_type}/{addon_name}/versions/{version_name}" : {
      "get" : {
        "description" : "Get details about a given addon version.",
        "operationId" : "GetAddonVersion",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/addon_type"
        }, {
          "$ref" : "#/components/parameters/addon_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddonVersion"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "addons" ]
      },
      "patch" : {
        "description" : "Update a given addon version",
        "operationId" : "UpdateAddonVersion",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/addon_type"
        }, {
          "$ref" : "#/components/parameters/addon_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddonVersionUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddonVersion"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "addons" ]
      },
      "put" : {
        "description" : "Create a new addon version, or update a draft version",
        "operationId" : "CreateAddonVersion",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/addon_type"
        }, {
          "$ref" : "#/components/parameters/addon_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAddonVersion_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddonVersion"
                }
              }
            },
            "description" : "Response"
          },
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddonVersion"
                }
              }
            },
            "description" : "Success (the addon version was created)"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "addons" ]
      }
    },
    "/addons/{team_name}/{addon_type}/{addon_name}/versions/{version_name}/assets" : {
      "get" : {
        "description" : "Download an asset for a given version",
        "operationId" : "DownloadAddonAsset",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/addon_type"
        }, {
          "$ref" : "#/components/parameters/addon_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddonAsset"
                }
              }
            },
            "description" : "Response"
          },
          "302" : {
            "description" : "Response",
            "headers" : {
              "Location" : {
                "explode" : false,
                "schema" : {
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "addons" ]
      },
      "post" : {
        "description" : "Get a URL to upload an asset for a given addon version",
        "operationId" : "UploadAddonAsset",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/addon_type"
        }, {
          "$ref" : "#/components/parameters/addon_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReleaseURL"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "addons" ]
      }
    },
    "/teams" : {
      "get" : {
        "description" : "List all teams",
        "operationId" : "ListTeams",
        "parameters" : [ {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListTeams_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "post" : {
        "description" : "Create a team owned by the current user.",
        "operationId" : "CreateTeam",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTeam_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}" : {
      "delete" : {
        "description" : "Delete team",
        "operationId" : "DeleteTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ],
        "x-internal" : true
      },
      "get" : {
        "description" : "Get a team by name",
        "operationId" : "GetTeamByName",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "patch" : {
        "description" : "Update team attributes",
        "operationId" : "UpdateTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateTeam_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/images" : {
      "post" : {
        "description" : "Get URLs to upload images for a given team",
        "operationId" : "CreateTeamImages",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTeamImages_request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTeamImages_201_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/plugins" : {
      "delete" : {
        "description" : "Delete plugins by team",
        "operationId" : "DeletePluginsByTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ],
        "x-internal" : true
      },
      "get" : {
        "description" : "List all plugins for the team.",
        "operationId" : "ListPluginsByTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/include_private"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPluginsByTeam_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/teams/{team_name}/addons" : {
      "delete" : {
        "description" : "Delete addons by team",
        "operationId" : "DeleteAddonsByTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "addons" ],
        "x-internal" : true
      },
      "get" : {
        "description" : "List all addons for the team.",
        "operationId" : "ListAddonsByTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/include_private"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListAddonsByTeam_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "addons" ]
      }
    },
    "/teams/{team_name}/addon-orders" : {
      "get" : {
        "description" : "List all addon orders for the team.",
        "operationId" : "ListAddonOrdersByTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListAddonOrdersByTeam_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "addons" ]
      },
      "post" : {
        "description" : "Start the checkout process for an addon order.",
        "operationId" : "CreateAddonOrderForTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddonOrderCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddonOrder"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "addons" ]
      }
    },
    "/teams/{team_name}/addon-orders/{addon_order_id}" : {
      "get" : {
        "description" : "Get an addon order for the team.",
        "operationId" : "GetAddonOrderByTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/addon_order_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddonOrder"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "addons" ]
      }
    },
    "/teams/{team_name}/memberships" : {
      "delete" : {
        "description" : "Remove a user from the team",
        "operationId" : "RemoveTeamMembership",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemoveTeamMembership_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "get" : {
        "description" : "Get memberships to the team.",
        "operationId" : "GetTeamMemberships",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTeamMemberships_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/memberships/{email}" : {
      "delete" : {
        "deprecated" : true,
        "description" : "Remove a user from the team",
        "operationId" : "DeleteTeamMembership",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/email_basic"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/spending-limits" : {
      "delete" : {
        "description" : "Delete a spending limit for a team",
        "operationId" : "DeleteSpendingLimit",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Spending limit deleted."
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "get" : {
        "description" : "Get monthly spending limit for team.",
        "operationId" : "GetSpendingLimit",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpendingLimit"
                }
              }
            },
            "description" : "Spending limit retrieved."
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "post" : {
        "description" : "Create a spending limit for a team",
        "operationId" : "CreateSpendingLimit",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SpendingLimitCreate"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpendingLimit"
                }
              }
            },
            "description" : "New spending limit created."
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "put" : {
        "description" : "Update a spending limit for a team",
        "operationId" : "UpdateSpendingLimit",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SpendingLimitUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpendingLimit"
                }
              }
            },
            "description" : "Spending limit updated."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/invoices" : {
      "get" : {
        "description" : "List all past invoices for the team.",
        "operationId" : "ListInvoicesByTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListInvoicesByTeam_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/usage" : {
      "get" : {
        "description" : "List plugin usage for the current calendar month.",
        "operationId" : "ListTeamPluginUsage",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListTeamPluginUsage_200_response"
                }
              }
            },
            "description" : "List plugin usage for the current calendar month."
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "post" : {
        "description" : "Increase the usage of a plugin. This can incur billing costs and should be used only by plugin SDKs.",
        "operationId" : "IncreaseTeamPluginUsage",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsageIncrease"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success (the plugin usage was increased). It may take some time to reflect in the usage list.",
            "headers" : {
              "x-cq-minimum-update-interval" : {
                "explode" : false,
                "schema" : {
                  "description" : "The minimum interval in seconds between usage updates.",
                  "format" : "int32",
                  "type" : "integer"
                },
                "style" : "simple"
              },
              "x-cq-maximum-update-interval" : {
                "explode" : false,
                "schema" : {
                  "description" : "The maximum interval in seconds before a usage update is forced.",
                  "format" : "int32",
                  "type" : "integer"
                },
                "style" : "simple"
              },
              "x-cq-batch-limit" : {
                "explode" : false,
                "schema" : {
                  "description" : "The number of rows to batch before sending a usage update.",
                  "format" : "int32",
                  "type" : "integer"
                },
                "style" : "simple"
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          },
          "503" : {
            "$ref" : "#/components/responses/ServiceUnavailable"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/usage/{plugin_team}/{plugin_kind}/{plugin_name}" : {
      "get" : {
        "description" : "Get plugin usage for the current calendar month.",
        "operationId" : "GetTeamPluginUsage",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_team"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageCurrent"
                }
              }
            },
            "description" : "Plugin usage for the current calendar month."
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/usage-summary" : {
      "get" : {
        "description" : "Get a summary of usage for the specified time range.",
        "operationId" : "GetTeamUsageSummary",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "metrics",
          "required" : false,
          "schema" : {
            "default" : [ "paid_rows" ],
            "description" : "A list of metrics to include in the response. Each metric must be one of the predefined valid values. If not provided, only `paid-rows` will be included.",
            "items" : {
              "enum" : [ "paid_rows", "cloud_vcpu_seconds", "cloud_vram_byte_seconds", "network_egress_bytes" ],
              "type" : "string"
            },
            "type" : "array"
          },
          "style" : "form"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "start",
          "required" : false,
          "schema" : {
            "description" : "A valid ISO-8601-formatted date and time, indicating the inclusive start of the query time range. Defaults to 30 days ago.",
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "end",
          "required" : false,
          "schema" : {
            "description" : "A valid ISO-8601-formatted date and time, indicating the exclusive end of the query time range. Defaults to the current time.",
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "An aggregation period to sum data over. In other words, data will be returned at this granularity. Currently only supports day and month.",
          "explode" : true,
          "in" : "query",
          "name" : "aggregation_period",
          "required" : false,
          "schema" : {
            "default" : "day",
            "enum" : [ "day", "month" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageSummary"
                }
              }
            },
            "description" : "A summary of usage for the specified time range."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/usage-summary/{group_by}" : {
      "get" : {
        "description" : "Get a grouped summary of usage for the specified time range.",
        "operationId" : "GetGroupedTeamUsageSummary",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "group_by",
          "required" : true,
          "schema" : {
            "description" : "Group by usage summary. `plugin` and `price_category` groupings are only available for `paid-rows`.",
            "enum" : [ "price_category", "plugin", "sync_id" ],
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "metrics",
          "required" : false,
          "schema" : {
            "default" : [ "paid_rows" ],
            "description" : "A list of metrics to include in the response. Each metric must be one of the predefined valid values. If not provided, only `paid-rows` will be included.",
            "items" : {
              "enum" : [ "paid_rows", "cloud_vcpu_seconds", "cloud_vram_byte_seconds", "network_egress_bytes" ],
              "type" : "string"
            },
            "type" : "array"
          },
          "style" : "form"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "start",
          "required" : false,
          "schema" : {
            "description" : "A valid ISO-8601-formatted date and time, indicating the inclusive start of the query time range. Defaults to 30 days ago.",
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "end",
          "required" : false,
          "schema" : {
            "description" : "A valid ISO-8601-formatted date and time, indicating the exclusive end of the query time range. Defaults to the current time.",
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "An aggregation period to sum data over. In other words, data will be returned at this granularity. Currently only supports day and month.",
          "explode" : true,
          "in" : "query",
          "name" : "aggregation_period",
          "required" : false,
          "schema" : {
            "default" : "day",
            "enum" : [ "day", "month" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageSummary"
                }
              }
            },
            "description" : "A summary of usage for the specified time range."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/spend" : {
      "get" : {
        "description" : "Get team spend for defined period.",
        "operationId" : "GetTeamSpend",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "A valid ISO 8601 date string representing the inclusive start of the period.",
          "explode" : true,
          "in" : "query",
          "name" : "start",
          "required" : false,
          "schema" : {
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "A valid ISO 8601 date string representing the exclusive end of the period.",
          "explode" : true,
          "in" : "query",
          "name" : "end",
          "required" : false,
          "schema" : {
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpendSummary"
                }
              }
            },
            "description" : "Team spend for defined period."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/plugins/{plugin_team}/{plugin_kind}/{plugin_name}/versions/{version_name}/assets/{target_name}" : {
      "get" : {
        "description" : "Download an asset for a given plugin version as the current team.",
        "operationId" : "DownloadPluginAssetByTeam",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_team"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        }, {
          "$ref" : "#/components/parameters/target_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginAsset"
                }
              }
            },
            "description" : "Response"
          },
          "302" : {
            "description" : "Response",
            "headers" : {
              "Location" : {
                "explode" : false,
                "schema" : {
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/teams/{team_name}/addons/{addon_team}/{addon_type}/{addon_name}/versions/{version_name}/assets" : {
      "get" : {
        "description" : "Download an asset for a given addon version as the current team.",
        "operationId" : "DownloadAddonAssetByTeam",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/addon_team"
        }, {
          "$ref" : "#/components/parameters/addon_type"
        }, {
          "$ref" : "#/components/parameters/addon_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddonAsset"
                }
              }
            },
            "description" : "Response"
          },
          "302" : {
            "description" : "Response",
            "headers" : {
              "Location" : {
                "explode" : false,
                "schema" : {
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "addons" ]
      }
    },
    "/teams/{team_name}/invitations" : {
      "delete" : {
        "description" : "Delete an invitation to the team, preventing the user becoming a team member",
        "operationId" : "DeleteTeamInvitation",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeleteTeamInvitation_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "get" : {
        "description" : "List of open invitations to the team",
        "operationId" : "ListTeamInvitations",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListTeamInvitations_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "post" : {
        "description" : "Invite a user to join a team with their email address",
        "operationId" : "EmailTeamInvitation",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailTeamInvitation_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invitation"
                }
              }
            },
            "description" : "Response"
          },
          "202" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invitation"
                }
              }
            },
            "description" : "Response, email failed to send"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/invitations/accept" : {
      "post" : {
        "description" : "Accept an invitation to the team, creating a user membership",
        "operationId" : "AcceptTeamInvitation",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AcceptTeamInvitation_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MembershipWithTeam"
                }
              }
            },
            "description" : "The invitation has been accepted and the authenticated user is now a member of the team."
          },
          "303" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MembershipWithTeam"
                }
              }
            },
            "description" : "The authenticated user is already a member of this team."
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden",
            "description" : "You do not have an invitation to join this team."
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/invitations/{email}" : {
      "delete" : {
        "deprecated" : true,
        "description" : "Cancel an invitation to the team, preventing the user becoming a team member",
        "operationId" : "CancelTeamInvitation",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/email_basic"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/subscription-orders" : {
      "get" : {
        "description" : "List all subscription orders for the team.",
        "operationId" : "ListSubscriptionOrdersByTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSubscriptionOrdersByTeam_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "post" : {
        "description" : "Start the checkout process for a subscription order.",
        "operationId" : "CreateSubscriptionOrderForTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TeamSubscriptionOrderCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamSubscriptionOrder"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/subscription-orders/{subscription_order_id}" : {
      "get" : {
        "description" : "Get a subscription order for the team.",
        "operationId" : "GetSubscriptionOrderByTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/team_subscription_order_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamSubscriptionOrder"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/users" : {
      "get" : {
        "description" : "List all users in the current team.",
        "operationId" : "ListUsersByTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListUsersByTeam_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/user" : {
      "get" : {
        "description" : "Get the current authenticated user from the OAuth token\n",
        "operationId" : "GetCurrentUser",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      },
      "patch" : {
        "description" : "Update attributes for the current authenticated user from the OAuth token",
        "operationId" : "UpdateCurrentUser",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCurrentUser_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "405" : {
            "$ref" : "#/components/responses/MethodNotAllowed"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/user/invitations" : {
      "get" : {
        "description" : "List of the current user's unaccepted invitations",
        "operationId" : "ListCurrentUserInvitations",
        "parameters" : [ {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListCurrentUserInvitations_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/user/memberships" : {
      "get" : {
        "description" : "Get memberships that the user has accepted.",
        "operationId" : "GetCurrentUserMemberships",
        "parameters" : [ {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCurrentUserMemberships_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/users/{user_id}" : {
      "delete" : {
        "description" : "Delete user",
        "operationId" : "DeleteUser",
        "parameters" : [ {
          "$ref" : "#/components/parameters/user_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ],
        "x-internal" : true
      }
    },
    "/teams/{team_name}/apikeys" : {
      "get" : {
        "description" : "List all team API Keys",
        "operationId" : "ListTeamAPIKeys",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListTeamAPIKeys_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "post" : {
        "description" : "Create new team API Key.",
        "operationId" : "CreateTeamAPIKey",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTeamAPIKey_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIKey"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/apikeys/{apikey_id}" : {
      "delete" : {
        "description" : "Delete API Key. This will remove any future access by this API Key.",
        "operationId" : "DeleteTeamAPIKey",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/apikey_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/registry/auth" : {
      "get" : {
        "description" : "Performs authentication and authorization for our image registry.",
        "operationId" : "AuthRegistryRequest",
        "parameters" : [ {
          "description" : "Plugin version name",
          "example" : "v1.0.0",
          "explode" : false,
          "in" : "header",
          "name" : "X-Meta-Plugin-Version",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "User's team name",
          "explode" : false,
          "in" : "header",
          "name" : "X-Meta-User-Team-Name",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Username used for `docker login`",
          "explode" : true,
          "in" : "query",
          "name" : "account",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Service requesting the JTW token",
          "explode" : true,
          "in" : "query",
          "name" : "service",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Multi-value string containing the repository being access and the operation type (push/pull)",
          "explode" : true,
          "in" : "query",
          "name" : "scope",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistryAuthToken"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/DockerError"
          },
          "401" : {
            "$ref" : "#/components/responses/DockerError"
          },
          "404" : {
            "$ref" : "#/components/responses/DockerError"
          },
          "422" : {
            "$ref" : "#/components/responses/DockerError"
          },
          "500" : {
            "$ref" : "#/components/responses/DockerError"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "tags" : [ "registry" ]
      }
    },
    "/teams/{team_name}/sync-sources" : {
      "get" : {
        "description" : "List all sync source definitions.",
        "operationId" : "ListSyncSources",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncSources_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "post" : {
        "description" : "Create new draft Sync Source definition.",
        "operationId" : "CreateSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncSourceCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncSource"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-sources/test" : {
      "post" : {
        "deprecated" : true,
        "description" : "DEPRECATED. Test a Sync Source definition. Use CreateTestConnectionForSyncSource instead.",
        "operationId" : "TestSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncSourceCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-sources/{sync_source_name}" : {
      "delete" : {
        "description" : "Delete a Sync Source definition. Any syncs relying on this source must be deleted first.",
        "operationId" : "DeleteSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "get" : {
        "description" : "Get a single sync source definition.",
        "operationId" : "GetSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncSource"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a Sync Source definition.",
        "operationId" : "UpdateSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncSourceUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncSource"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-sources/{sync_source_name}/test-connections" : {
      "post" : {
        "description" : "Create a test connection for sync source.",
        "operationId" : "CreateTestConnectionForSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncTestConnectionCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-sources/{sync_source_name}/test-connections/{sync_test_connection_id}" : {
      "get" : {
        "description" : "Get test connection details for sync source.",
        "operationId" : "GetTestConnectionForSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-sources/{sync_source_name}/test-connections/{sync_test_connection_id}/promote" : {
      "post" : {
        "description" : "Promote a test connection for sync source.",
        "operationId" : "PromoteTestConnectionForSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncSource"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destinations" : {
      "get" : {
        "description" : "List all sync destination definitions.",
        "operationId" : "ListSyncDestinations",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncDestinations_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "post" : {
        "description" : "Create new draft Sync Destination definition.",
        "operationId" : "CreateSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncDestinationCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncDestination"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destinations/test" : {
      "post" : {
        "deprecated" : true,
        "description" : "DEPRECATED. Test a Sync Destination definition. Use CreateTestConnectionForSyncDestination instead.",
        "operationId" : "TestSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncDestinationCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destinations/{sync_destination_name}" : {
      "delete" : {
        "description" : "Delete a Sync Destination definition. Any syncs relying on this destination must be deleted first.",
        "operationId" : "DeleteSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "get" : {
        "description" : "Get a single sync destination definition.",
        "operationId" : "GetSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncDestination"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a Sync Destination definition.",
        "operationId" : "UpdateSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncDestinationUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncDestination"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destinations/{sync_destination_name}/test-connections" : {
      "post" : {
        "description" : "Create a test connection for sync destination.",
        "operationId" : "CreateTestConnectionForSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncTestConnectionCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destinations/{sync_destination_name}/test-connections/{sync_test_connection_id}" : {
      "get" : {
        "description" : "Get test connection details for sync destination.",
        "operationId" : "GetTestConnectionForSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destinations/{sync_destination_name}/test-connections/{sync_test_connection_id}/promote" : {
      "post" : {
        "description" : "Promote a test connection for sync destination.",
        "operationId" : "PromoteTestConnectionForSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncDestination"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs" : {
      "get" : {
        "description" : "List all Syncs.",
        "operationId" : "ListSyncs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncs_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "post" : {
        "description" : "Create new Sync definition. Sync runs can be scheduled automatically, or triggered manually after sync is created.",
        "operationId" : "CreateSync",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sync"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}" : {
      "delete" : {
        "description" : "Delete Sync. This will delete Sync configuration and all associated sync runs, but will not delete the associated source and destination(s). These will need to be deleted separately.",
        "operationId" : "DeleteSync",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "get" : {
        "description" : "Get a Sync",
        "operationId" : "GetSync",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sync"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a Sync",
        "operationId" : "UpdateSync",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sync"
                }
              }
            },
            "description" : "Updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs" : {
      "get" : {
        "description" : "List all Sync Runs.",
        "operationId" : "ListSyncRuns",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncRuns_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "post" : {
        "description" : "Create new SyncRun. This will trigger a manual job run.",
        "operationId" : "CreateSyncRun",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        } ],
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncRun"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}" : {
      "get" : {
        "description" : "Get a Sync Run.",
        "operationId" : "GetSyncRun",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncRunDetails"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a SyncRun",
        "operationId" : "UpdateSyncRun",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSyncRun_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncRun"
                }
              }
            },
            "description" : "Updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/progress" : {
      "post" : {
        "description" : "Create a new sync run progress update.",
        "operationId" : "CreateSyncRunProgress",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateSyncRunProgress_request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Progress was reported successfully"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ],
        "x-internal" : true
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/logs" : {
      "get" : {
        "description" : "Get logs for a sync run.",
        "operationId" : "GetSyncRunLogs",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sync_Run_Logs"
                }
              },
              "text/plain" : {
                "schema" : {
                  "description" : "Chunked response logs for a sync run that is in progress.",
                  "type" : "string"
                }
              }
            },
            "description" : "Response"
          },
          "204" : {
            "description" : "No logs available for a sync run that has not started."
          },
          "302" : {
            "description" : "Redirect to the logs download URL for a sync run that has completed.",
            "headers" : {
              "Location" : {
                "explode" : false,
                "schema" : {
                  "description" : "URL to download logs",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/connector/{connector_id}/identity" : {
      "get" : {
        "description" : "Get connector identity for a sync run.",
        "operationId" : "GetSyncRunConnectorIdentity",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSyncRunConnectorIdentity_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ],
        "x-internal" : true
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/connector/{connector_id}/credentials" : {
      "get" : {
        "description" : "Get connector credentials for a sync run.",
        "operationId" : "GetSyncRunConnectorCredentials",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSyncRunConnectorCredentials_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ],
        "x-internal" : true
      }
    },
    "/teams/{team_name}/syncs/test-connections/{sync_test_connection_id}" : {
      "get" : {
        "deprecated" : true,
        "description" : "DEPRECATED. Get a Sync Test Connection. Use GetTestConnectionForSyncSource or GetTestConnectionForSyncDestination instead.",
        "operationId" : "GetSyncTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a Sync Test Connection",
        "operationId" : "UpdateSyncTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSyncTestConnection_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTestConnection"
                }
              }
            },
            "description" : "Updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/test-connections/{sync_test_connection_id}/new-source" : {
      "post" : {
        "deprecated" : true,
        "description" : "DEPRECATED. Create new Sync Source definition from a test connection. Use PromoteTestConnectionForSyncSource instead.",
        "operationId" : "CreateSyncSourceFromTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncSourceCreateFromTestConnection"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncSource"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/test-connections/{sync_test_connection_id}/new-destination" : {
      "post" : {
        "deprecated" : true,
        "description" : "DEPRECATED. Create new Sync Destination definition from a test connection. Use PromoteTestConnectionForSyncDestination instead.",
        "operationId" : "CreateSyncDestinationFromTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncDestinationCreateFromTestConnection"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncDestination"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/test-connections/{sync_test_connection_id}/update-source/{sync_source_name}" : {
      "patch" : {
        "deprecated" : true,
        "description" : "DEPRECATED. Update Sync Source definition from a test connection. Use PromoteTestConnectionForSyncSource and/or UpdateSyncSource instead.",
        "operationId" : "UpdateSyncSourceFromTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        }, {
          "$ref" : "#/components/parameters/sync_source_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncSourceUpdateFromTestConnection"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncSource"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/test-connections/{sync_test_connection_id}/update-destination/{sync_destination_name}" : {
      "patch" : {
        "deprecated" : true,
        "description" : "DEPRECATED. Update Sync Destination definition from a test connection. Use PromoteTestConnectionForSyncDestination and/or UpdateSyncDestination instead.",
        "operationId" : "UpdateSyncDestinationFromTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        }, {
          "$ref" : "#/components/parameters/sync_destination_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncDestinationUpdateFromTestConnection"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncDestination"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/test-connections/{sync_test_connection_id}/connector/{connector_id}/identity" : {
      "get" : {
        "description" : "Get connector identity for a test connection.",
        "operationId" : "GetTestConnectionConnectorIdentity",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSyncRunConnectorIdentity_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ],
        "x-internal" : true
      }
    },
    "/teams/{team_name}/syncs/test-connections/{sync_test_connection_id}/connector/{connector_id}/credentials" : {
      "get" : {
        "description" : "Get connector credentials for a test connection",
        "operationId" : "GetTestConnectionConnectorCredentials",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSyncRunConnectorCredentials_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ],
        "x-internal" : true
      }
    },
    "/teams/{team_name}/managed-databases" : {
      "get" : {
        "description" : "Get a paginated list of managed databases",
        "operationId" : "GetManagedDatabases",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetManagedDatabases_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "managed-databases" ],
        "x-internal" : true
      },
      "post" : {
        "description" : "Create a new managed database",
        "operationId" : "CreateManagedDatabase",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ManagedDatabaseCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManagedDatabase"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "managed-databases" ],
        "x-internal" : true
      }
    },
    "/teams/{team_name}/managed-databases/{managed_database_id}" : {
      "delete" : {
        "description" : "Delete this managed database. Any syncs relying on this database must be deleted first.",
        "operationId" : "DeleteManagedDatabase",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/managed_database_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "managed-databases" ],
        "x-internal" : true
      },
      "get" : {
        "description" : "Get a single managed database.",
        "operationId" : "GetManagedDatabase",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/managed_database_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManagedDatabase"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "managed-databases" ],
        "x-internal" : true
      }
    },
    "/teams/{team_name}/connectors" : {
      "get" : {
        "description" : "List all configured connectors",
        "operationId" : "ListConnectors",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "description" : "Filter connectors by a given type.",
          "explode" : true,
          "in" : "query",
          "name" : "filter_type",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Filter connectors by a given plugin reference. Mutually exclusive with `type`.",
          "example" : "cloudquery/source/googleanalytics",
          "explode" : true,
          "in" : "query",
          "name" : "filter_plugin",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListConnectors_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "post" : {
        "description" : "Create new connector",
        "operationId" : "CreateConnector",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectorCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Connector"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/connectors/{connector_id}" : {
      "get" : {
        "description" : "Get a configured connector",
        "operationId" : "GetConnector",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Connector"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a connector",
        "operationId" : "UpdateConnector",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectorUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Connector"
                }
              }
            },
            "description" : "Update response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/connectors/{connector_id}/authenticate" : {
      "delete" : {
        "description" : "Revoke authentication for a given connector. Any syncs relying on this connector will stop running until the connector is reauthenticated or sync references are updated.",
        "operationId" : "RevokeConnector",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/connectors/{connector_id}/authenticate/aws" : {
      "patch" : {
        "description" : "Complete authentication for the given AWS connector",
        "operationId" : "AuthenticateConnectorFinishAWS",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectorAuthFinishRequestAWS"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Authentication is complete."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "post" : {
        "description" : "Authenticate or reauthenticate the given AWS connector",
        "operationId" : "AuthenticateConnectorAWS",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectorAuthRequestAWS"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectorAuthResponseAWS"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/connectors/{connector_id}/authenticate/oauth" : {
      "patch" : {
        "description" : "Complete authentication for the given OAuth connector",
        "operationId" : "AuthenticateConnectorFinishOAuth",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectorAuthFinishRequestOAuth"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Authentication is complete."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "post" : {
        "description" : "Authenticate or reauthenticate the given OAuth connector",
        "operationId" : "AuthenticateConnectorOAuth",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectorAuthRequestOAuth"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectorAuthResponseOAuth"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    }
  },
  "components" : {
    "parameters" : {
      "page" : {
        "description" : "Page number of the results to fetch",
        "explode" : true,
        "in" : "query",
        "name" : "page",
        "required" : false,
        "schema" : {
          "default" : 1,
          "format" : "int64",
          "minimum" : 1,
          "type" : "integer"
        },
        "style" : "form"
      },
      "per_page" : {
        "description" : "The number of results per page (max 1000).",
        "explode" : true,
        "in" : "query",
        "name" : "per_page",
        "required" : false,
        "schema" : {
          "default" : 100,
          "format" : "int64",
          "maximum" : 1000,
          "minimum" : 1,
          "type" : "integer"
        },
        "style" : "form"
      },
      "plugin_team" : {
        "explode" : false,
        "in" : "path",
        "name" : "plugin_team",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/TeamName"
        },
        "style" : "simple"
      },
      "plugin_kind" : {
        "explode" : false,
        "in" : "path",
        "name" : "plugin_kind",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/PluginKind"
        },
        "style" : "simple"
      },
      "plugin_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "plugin_name",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/PluginName"
        },
        "style" : "simple"
      },
      "plugin_sort_by" : {
        "description" : "The field to sort by",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "enum" : [ "created_at", "updated_at", "name", "downloads" ],
          "type" : "string"
        },
        "style" : "form"
      },
      "team_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "team_name",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/TeamName"
        },
        "style" : "simple"
      },
      "version_sort_by" : {
        "description" : "The field to sort by",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "enum" : [ "created_at" ],
          "type" : "string"
        },
        "style" : "form"
      },
      "include_drafts" : {
        "description" : "Whether to include draft versions",
        "explode" : true,
        "in" : "query",
        "name" : "include_drafts",
        "required" : false,
        "schema" : {
          "type" : "boolean"
        },
        "style" : "form"
      },
      "include_prereleases" : {
        "description" : "Whether to include prerelease versions",
        "explode" : true,
        "in" : "query",
        "name" : "include_prereleases",
        "required" : false,
        "schema" : {
          "type" : "boolean"
        },
        "style" : "form"
      },
      "version_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "version_name",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/VersionName"
        },
        "style" : "simple"
      },
      "target_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "target_name",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "addon_sort_by" : {
        "description" : "The field to sort by",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "enum" : [ "created_at", "updated_at", "name", "downloads" ],
          "type" : "string"
        },
        "style" : "form"
      },
      "addon_type" : {
        "explode" : false,
        "in" : "path",
        "name" : "addon_type",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/AddonType"
        },
        "style" : "simple"
      },
      "addon_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "addon_name",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/AddonName"
        },
        "style" : "simple"
      },
      "include_private" : {
        "description" : "Whether to include private plugins",
        "explode" : true,
        "in" : "query",
        "name" : "include_private",
        "required" : false,
        "schema" : {
          "type" : "boolean"
        },
        "style" : "form"
      },
      "addon_order_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "addon_order_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/AddonOrderID"
        },
        "style" : "simple",
        "x-go-name" : "AddonOrderID"
      },
      "email_basic" : {
        "explode" : false,
        "in" : "path",
        "name" : "email",
        "required" : true,
        "schema" : {
          "example" : "user@example.com",
          "type" : "string"
        },
        "style" : "simple"
      },
      "addon_team" : {
        "explode" : false,
        "in" : "path",
        "name" : "addon_team",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/TeamName"
        },
        "style" : "simple"
      },
      "team_subscription_order_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "subscription_order_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/TeamSubscriptionOrderID"
        },
        "style" : "simple",
        "x-go-name" : "TeamSubscriptionOrderID"
      },
      "user_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "user_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/UserID"
        },
        "style" : "simple",
        "x-go-name" : "UserID"
      },
      "apikey_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "apikey_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/APIKeyID"
        },
        "style" : "simple",
        "x-go-name" : "APIKeyID"
      },
      "sync_source_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_source_name",
        "required" : true,
        "schema" : {
          "description" : "Unique name of the sync source",
          "pattern" : "^[a-zA-Z0-9_-]+$",
          "type" : "string",
          "x-go-name" : "SyncSourceName"
        },
        "style" : "simple"
      },
      "sync_test_connection_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_test_connection_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/SyncTestConnectionID"
        },
        "style" : "simple"
      },
      "sync_destination_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_destination_name",
        "required" : true,
        "schema" : {
          "description" : "Unique name of the sync destination",
          "pattern" : "^[a-zA-Z0-9_-]+$",
          "type" : "string",
          "x-go-name" : "SyncDestinationName"
        },
        "style" : "simple"
      },
      "sync_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_name",
        "required" : true,
        "schema" : {
          "description" : "Unique name of the sync",
          "pattern" : "^[a-zA-Z0-9_-]+$",
          "type" : "string",
          "x-go-name" : "SyncName"
        },
        "style" : "simple"
      },
      "sync_run_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_run_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/SyncRunID"
        },
        "style" : "simple"
      },
      "connector_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "connector_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/ConnectorID"
        },
        "style" : "simple",
        "x-go-name" : "ConnectorID"
      },
      "managed_database_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "managed_database_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/ManagedDatabaseID"
        },
        "style" : "simple",
        "x-go-name" : "ManagedDatabaseID"
      }
    },
    "responses" : {
      "InternalError" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BasicError"
            }
          }
        },
        "description" : "Internal Error"
      },
      "RequiresAuthentication" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BasicError"
            }
          }
        },
        "description" : "Requires authentication"
      },
      "BadRequest" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/FieldError"
            }
          }
        },
        "description" : "Bad request"
      },
      "Forbidden" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/FieldError"
            }
          }
        },
        "description" : "Forbidden"
      },
      "NotFound" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BasicError"
            }
          }
        },
        "description" : "Resource not found"
      },
      "UnprocessableEntity" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/FieldError"
            }
          }
        },
        "description" : "UnprocessableEntity"
      },
      "TooManyRequests" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BasicError"
            }
          }
        },
        "description" : "Too Many Requests"
      },
      "ServiceUnavailable" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BasicError"
            }
          }
        },
        "description" : "Service unavailable"
      },
      "MethodNotAllowed" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BasicError"
            }
          }
        },
        "description" : "Method not allowed"
      },
      "DockerError" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/DockerError"
            }
          }
        },
        "description" : "Error Returned from the Docker Authorization Handler to the Docker Registry"
      },
      "Conflict" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BasicError"
            }
          }
        },
        "description" : "Conflict"
      }
    },
    "schemas" : {
      "ImageURL" : {
        "properties" : {
          "upload_url" : {
            "example" : "https://cloudquery.io/api/v1/upload/1234567890abcdef1234567890abcdef",
            "type" : "string"
          },
          "download_url" : {
            "example" : "https://cloudquery.io/api/v1/download/1234567890abcdef1234567890abcdef",
            "type" : "string"
          }
        },
        "required" : [ "download_url", "upload_url" ]
      },
      "BasicError" : {
        "additionalProperties" : false,
        "description" : "Basic Error",
        "properties" : {
          "message" : {
            "type" : "string"
          },
          "status" : {
            "type" : "integer"
          }
        },
        "required" : [ "message", "status" ],
        "title" : "Basic Error"
      },
      "TeamName" : {
        "description" : "The unique name for the team.",
        "example" : "cloudquery",
        "maxLength" : 255,
        "pattern" : "^[a-z](-?[a-z0-9]+)+$",
        "type" : "string"
      },
      "PluginKind" : {
        "description" : "The kind of plugin, ie. source or destination.",
        "enum" : [ "source", "destination" ],
        "example" : "source",
        "type" : "string"
      },
      "PluginName" : {
        "description" : "The unique name for the plugin.",
        "example" : "aws-source",
        "maxLength" : 255,
        "pattern" : "^[a-z](-?[a-z0-9]+)+$",
        "type" : "string"
      },
      "PluginNotificationRequestStatus" : {
        "default" : "pending",
        "description" : "Status of a plugin notification request",
        "enum" : [ "pending", "sent" ],
        "type" : "string"
      },
      "PluginNotificationRequest" : {
        "additionalProperties" : false,
        "description" : "Plugin Notification Request",
        "properties" : {
          "plugin_team" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "plugin_kind" : {
            "$ref" : "#/components/schemas/PluginKind"
          },
          "plugin_name" : {
            "$ref" : "#/components/schemas/PluginName"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "sent_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "status" : {
            "$ref" : "#/components/schemas/PluginNotificationRequestStatus"
          }
        },
        "required" : [ "created_at", "plugin_kind", "plugin_name", "plugin_team" ]
      },
      "ListMetadata" : {
        "properties" : {
          "total_count" : {
            "type" : "integer"
          },
          "last_page" : {
            "type" : "integer"
          }
        }
      },
      "PluginNotificationRequestCreate" : {
        "additionalProperties" : false,
        "description" : "Create a Plugin Notification Request",
        "properties" : {
          "plugin_team" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "plugin_kind" : {
            "$ref" : "#/components/schemas/PluginKind"
          },
          "plugin_name" : {
            "$ref" : "#/components/schemas/PluginName"
          }
        },
        "required" : [ "plugin_kind", "plugin_name", "plugin_team" ]
      },
      "FieldError" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BasicError"
        }, {
          "properties" : {
            "errors" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            },
            "field_errors" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        } ]
      },
      "PluginCategory" : {
        "description" : "Supported categories for plugins",
        "enum" : [ "cloud-infrastructure", "databases", "sales-marketing", "engineering-analytics", "marketing-analytics", "shipment-tracking", "product-analytics", "cloud-finops", "project-management", "fleet-management", "security", "data-warehouses", "human-resources", "other" ],
        "type" : "string"
      },
      "PluginPriceCategory" : {
        "description" : "Supported price categories for billing",
        "enum" : [ "api", "database", "free" ],
        "type" : "string"
      },
      "PluginReleaseStage" : {
        "description" : "Official plugins can go through three release stages: Coming Soon, Preview, and GA.\nThe Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.\nBoth Preview and GA plugins follow semantic versioning. The main differences between the two stages are:\nPreview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.",
        "enum" : [ "coming-soon", "preview", "ga" ],
        "type" : "string"
      },
      "PluginTier" : {
        "deprecated" : true,
        "description" : "This field is deprecated, refer to `price_category` instead.\nThis field is only kept for backward compatibility and may be removed in a future release.\nSupported tiers for plugins.\n  - free: Free tier, with no paid tables.\n  - paid: Paid tier. These plugins may have paid tables, but can also have free tables. They require login to access.\n  - open-core: This option is deprecated, values will either be free or paid.\n",
        "enum" : [ "free", "paid", "open-core" ],
        "type" : "string"
      },
      "Plugin" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin",
        "properties" : {
          "team_name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "name" : {
            "$ref" : "#/components/schemas/PluginName"
          },
          "kind" : {
            "$ref" : "#/components/schemas/PluginKind"
          },
          "category" : {
            "$ref" : "#/components/schemas/PluginCategory"
          },
          "price_category" : {
            "$ref" : "#/components/schemas/PluginPriceCategory"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "homepage" : {
            "example" : "https://cloudquery.io",
            "type" : "string"
          },
          "logo" : {
            "example" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
            "type" : "string"
          },
          "display_name" : {
            "description" : "The plugin's display name",
            "example" : "AWS Source Plugin",
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string"
          },
          "official" : {
            "description" : "True if the plugin is maintained by CloudQuery, false otherwise",
            "type" : "boolean"
          },
          "release_stage" : {
            "$ref" : "#/components/schemas/PluginReleaseStage"
          },
          "repository" : {
            "example" : "https://github.com/cloudquery/cloudquery",
            "type" : "string"
          },
          "short_description" : {
            "example" : "Sync data from AWS to any destination",
            "maxLength" : 512,
            "minLength" : 1,
            "type" : "string"
          },
          "tier" : {
            "$ref" : "#/components/schemas/PluginTier"
          },
          "public" : {
            "description" : "Whether the plugin is listed in the CloudQuery Hub. If false, the plugin will not be shown in the CloudQuery Hub and will only be visible to members of the plugin's team.",
            "type" : "boolean"
          },
          "usd_per_row" : {
            "deprecated" : true,
            "description" : "Deprecated. Refer to `price_category` instead.",
            "example" : "0.0001",
            "pattern" : "^\\d+(?:\\.\\d{1,10})?$",
            "type" : "string",
            "x-go-name" : "USDPerRow"
          },
          "free_rows_per_month" : {
            "deprecated" : true,
            "description" : "Deprecated. Refer to `price_category` instead.",
            "example" : 1000,
            "format" : "int64",
            "type" : "integer"
          },
          "minimum_cloud_version" : {
            "description" : "Minimum plugin version that is supported in CloudQuery managed syncs.",
            "example" : "v1.2.3",
            "maxLength" : 64,
            "type" : "string"
          }
        },
        "required" : [ "category", "created_at", "display_name", "free_rows_per_month", "kind", "logo", "name", "official", "release_stage", "short_description", "team_name", "tier", "updated_at", "usd_per_row" ],
        "title" : "CloudQuery Plugin"
      },
      "VersionName" : {
        "description" : "The version in semantic version format.",
        "pattern" : "^v[0-9]+\\.[0-9]+\\.[0-9]+(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$",
        "type" : "string"
      },
      "ListPlugin" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Plugin"
        }, {
          "properties" : {
            "latest_version" : {
              "$ref" : "#/components/schemas/VersionName"
            }
          }
        } ]
      },
      "PluginReleaseStageCreate" : {
        "default" : "coming-soon",
        "description" : "Official plugins can go through three release stages: Coming Soon, Preview, and GA.\nThe Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.\nBoth Preview and GA plugins follow semantic versioning. The main differences between the two stages are:\nPreview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.",
        "enum" : [ "coming-soon", "preview", "ga" ],
        "type" : "string"
      },
      "PluginCreate" : {
        "properties" : {
          "team_name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "kind" : {
            "$ref" : "#/components/schemas/PluginKind"
          },
          "name" : {
            "$ref" : "#/components/schemas/PluginName"
          },
          "category" : {
            "$ref" : "#/components/schemas/PluginCategory"
          },
          "price_category" : {
            "$ref" : "#/components/schemas/PluginPriceCategory"
          },
          "tier" : {
            "$ref" : "#/components/schemas/PluginTier"
          },
          "display_name" : {
            "description" : "The plugin's display name, as shown in the CloudQuery Hub.",
            "example" : "AWS Source Plugin",
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string"
          },
          "short_description" : {
            "description" : "Short description of the plugin. This will be shown in the CloudQuery Hub.",
            "example" : "Sync data from AWS to any destination",
            "maxLength" : 512,
            "minLength" : 1,
            "type" : "string"
          },
          "homepage" : {
            "example" : "https://cloudquery.io",
            "type" : "string"
          },
          "public" : {
            "description" : "Whether the plugin is listed in the CloudQuery Hub. If false, the plugin will not be shown in the CloudQuery Hub and will only be visible to members of the team.",
            "example" : true,
            "type" : "boolean"
          },
          "repository" : {
            "example" : "https://github.com/cloudquery/cloudquery",
            "type" : "string"
          },
          "release_stage" : {
            "$ref" : "#/components/schemas/PluginReleaseStageCreate"
          },
          "logo" : {
            "description" : "URL to the plugin's logo. This will be shown in the CloudQuery Hub.",
            "example" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
            "pattern" : "^https:\\/\\/storage\\.googleapis\\.com\\/cq-cloud-images\\/[a-z0-9-]+$",
            "type" : "string"
          },
          "usd_per_row" : {
            "deprecated" : true,
            "description" : "Deprecated. Use `price_category` instead.",
            "example" : "0.00001",
            "pattern" : "^\\d+(?:\\.\\d{1,10})?$",
            "type" : "string",
            "x-go-name" : "USDPerRow"
          },
          "free_rows_per_month" : {
            "deprecated" : true,
            "description" : "Deprecated. Use `price_category` instead.",
            "example" : 10000,
            "format" : "int64",
            "type" : "integer"
          }
        },
        "required" : [ "category", "display_name", "kind", "name", "public", "short_description", "team_name" ]
      },
      "PluginReleaseStageUpdate" : {
        "description" : "Official plugins can go through three release stages: Coming Soon, Preview, and GA.\nThe Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.\nBoth Preview and GA plugins follow semantic versioning. The main differences between the two stages are:\nPreview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.",
        "enum" : [ "coming-soon", "preview", "ga" ],
        "type" : "string"
      },
      "PluginUpdate" : {
        "properties" : {
          "category" : {
            "$ref" : "#/components/schemas/PluginCategory"
          },
          "price_category" : {
            "$ref" : "#/components/schemas/PluginPriceCategory"
          },
          "tier" : {
            "$ref" : "#/components/schemas/PluginTier"
          },
          "display_name" : {
            "description" : "The plugin's display name, as shown in the CloudQuery Hub.",
            "example" : "AWS Source Plugin",
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string"
          },
          "short_description" : {
            "description" : "Short description of the plugin. This will be shown in the CloudQuery Hub.",
            "example" : "Sync data from AWS to any destination",
            "maxLength" : 512,
            "minLength" : 1,
            "type" : "string"
          },
          "homepage" : {
            "example" : "https://cloudquery.io",
            "type" : "string"
          },
          "repository" : {
            "example" : "https://github.com/cloudquery/cloudquery",
            "type" : "string"
          },
          "logo" : {
            "description" : "URL to the plugin's logo. This will be shown in the CloudQuery Hub.",
            "example" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f9e8",
            "pattern" : "^(https:\\/\\/storage\\.googleapis\\.com\\/cq-cloud-images\\/[a-z0-9-]+)?$",
            "type" : "string"
          },
          "public" : {
            "description" : "If plugin is not public, it won't be visible to other teams in the CloudQuery Hub.",
            "type" : "boolean"
          },
          "release_stage" : {
            "$ref" : "#/components/schemas/PluginReleaseStageUpdate"
          },
          "usd_per_row" : {
            "deprecated" : true,
            "description" : "Deprecated. Update `price_category` instead.",
            "example" : "0.0001",
            "pattern" : "^\\d+(?:\\.\\d{1,10})?$",
            "type" : "string",
            "x-go-name" : "USDPerRow"
          },
          "free_rows_per_month" : {
            "deprecated" : true,
            "description" : "Deprecated. Update `price_category` instead.",
            "example" : 1000,
            "format" : "int64",
            "type" : "integer"
          }
        }
      },
      "PluginPrice" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Price",
        "properties" : {
          "id" : {
            "description" : "ID of the price change",
            "example" : "12345678-1234-1234-1234-1234567890ab",
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "ID"
          },
          "usd_per_row" : {
            "description" : "The price per row in USD. This is used to calculate the price of a sync.",
            "example" : "0.0001",
            "pattern" : "^\\d+(?:\\.\\d{1,10})?$",
            "type" : "string",
            "x-go-name" : "USDPerRow"
          },
          "free_rows_per_month" : {
            "description" : "The number of rows that can be synced for free each month.",
            "example" : 1000,
            "format" : "int64",
            "type" : "integer"
          },
          "effective_from" : {
            "description" : "The date and time the price came (or will come) into effect.",
            "example" : "2024-01-02T00:00:00Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "effective_from", "free_rows_per_month", "id", "usd_per_row" ],
        "title" : "CloudQuery Plugin Price"
      },
      "PluginPriceCreate" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Price Create",
        "properties" : {
          "usd_per_row" : {
            "description" : "The price per row in USD. This is used to calculate the price of a sync.",
            "example" : "0.0001",
            "pattern" : "^\\d+(?:\\.\\d{1,10})?$",
            "type" : "string",
            "x-go-name" : "USDPerRow"
          },
          "free_rows_per_month" : {
            "description" : "The number of rows that can be synced for free each month.",
            "example" : 1000,
            "format" : "int64",
            "type" : "integer"
          },
          "effective_from" : {
            "description" : "The date and time the price came (or will come) into effect.",
            "example" : "2024-01-02T00:00:00Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "effective_from", "free_rows_per_month", "usd_per_row" ],
        "title" : "CloudQuery Plugin Price Create"
      },
      "PluginProtocols" : {
        "description" : "The CloudQuery protocols supported by this plugin version (only protocol 3 is supported by new plugins).",
        "items" : {
          "enum" : [ 3 ],
          "type" : "integer"
        },
        "type" : "array"
      },
      "PluginPackageType" : {
        "description" : "The package type of the plugin assets",
        "enum" : [ "native", "docker" ],
        "type" : "string"
      },
      "PluginVersionBase" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Version",
        "properties" : {
          "created_at" : {
            "description" : "The date and time the plugin version was created.",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "published_at" : {
            "description" : "The date and time the plugin version was set to non-draft (published).",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/VersionName"
          },
          "message" : {
            "description" : "Description of what's new or changed in this version (supports markdown)",
            "example" : "- Added support for AWS S3 - Added support for AWS EC2",
            "type" : "string"
          },
          "draft" : {
            "description" : "If a plugin version is in draft, it will not show to members outside the team or be counted as the latest version.",
            "type" : "boolean"
          },
          "retracted" : {
            "description" : "If a plugin version is retracted, assets will still be available for download, but the version will be marked as retracted to discourage use.",
            "type" : "boolean"
          },
          "protocols" : {
            "$ref" : "#/components/schemas/PluginProtocols"
          },
          "supported_targets" : {
            "description" : "The targets supported by this plugin version, formatted as <os>_<arch>",
            "example" : [ "linux_arm64", "darwin_amd64", "windows_amd64" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "checksums" : {
            "description" : "The checksums of the plugin assets",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "package_type" : {
            "$ref" : "#/components/schemas/PluginPackageType"
          }
        },
        "required" : [ "checksums", "created_at", "draft", "message", "name", "package_type", "protocols", "retracted", "supported_targets" ],
        "title" : "CloudQuery Plugin Version"
      },
      "PluginVersionList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PluginVersionBase"
        } ]
      },
      "PluginSpecJSONSchema" : {
        "description" : "The specification of the plugin. This is a JSON schema that describes the configuration of the plugin.",
        "type" : "string"
      },
      "PluginVersion" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PluginVersionBase"
        }, {
          "properties" : {
            "spec_json_schema" : {
              "$ref" : "#/components/schemas/PluginSpecJSONSchema"
            },
            "connector_required" : {
              "description" : "Whether a connector is required for this plugin version",
              "type" : "boolean"
            },
            "connector_types" : {
              "description" : "List of connector types available for this plugin version",
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            }
          }
        } ]
      },
      "PluginVersionDetails" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PluginVersion"
        }, {
          "properties" : {
            "example_config" : {
              "description" : "Example configuration for the plugin. This can be used in generated quickstart guides, for example. Markdown format.",
              "type" : "string"
            },
            "ui_base_url" : {
              "description" : "Base URL for the plugin's UI. Only available for plugins with a UI and for logged in users.",
              "type" : "string",
              "x-go-name" : "UIBaseURL"
            }
          },
          "required" : [ "example_config" ]
        } ]
      },
      "PluginVersionUpdate" : {
        "properties" : {
          "message" : {
            "description" : "Description of what's new or changed in this version (supports markdown)",
            "example" : "- Added support for *AWS S3* - Added support for *AWS EC2*",
            "type" : "string"
          },
          "draft" : {
            "description" : "If a plugin version is in draft, it will not show to members outside the team or be counted as the latest version. Once draft is set to false, only certain fields can be updated.",
            "type" : "boolean"
          },
          "retracted" : {
            "description" : "If a plugin version is retracted, assets will still be available for download, but the version will be marked as retracted to discourage use.",
            "type" : "boolean"
          },
          "protocols" : {
            "$ref" : "#/components/schemas/PluginProtocols"
          },
          "supported_targets" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "checksums" : {
            "description" : "The SHA-256 checksums of the plugin binaries, one per supported target.",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "package_type" : {
            "description" : "The package type of the plugin binaries",
            "type" : "string"
          },
          "spec_json_schema" : {
            "$ref" : "#/components/schemas/PluginSpecJSONSchema"
          }
        }
      },
      "PluginDocsPageName" : {
        "description" : "The unique name for the plugin documentation page.",
        "example" : "overview",
        "maxLength" : 255,
        "pattern" : "^[\\w,\\s-]+$",
        "type" : "string"
      },
      "PluginDocsPage" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Documentation Page",
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/PluginDocsPageName"
          },
          "content" : {
            "description" : "The content of the documentation page. Supports markdown.",
            "example" : "# Getting Started\n\nThis is the getting started page.",
            "type" : "string"
          }
        },
        "required" : [ "content", "name" ],
        "title" : "CloudQuery Plugin Documentation Page"
      },
      "PluginDocsPageCreate" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Documentation Page",
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/PluginDocsPageName"
          },
          "content" : {
            "description" : "The content of the documentation page. Supports markdown.",
            "example" : "# Getting Started\n\nThis is the getting started page.",
            "minLength" : 1,
            "type" : "string"
          }
        },
        "required" : [ "content", "name" ],
        "title" : "CloudQuery Plugin Documentation Page"
      },
      "PluginTableName" : {
        "description" : "Name of the table",
        "example" : "aws_ec2_instances",
        "maxLength" : 255,
        "pattern" : "^[a-z](_?[a-z0-9]+)+$",
        "type" : "string"
      },
      "PluginTable" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Table",
        "properties" : {
          "description" : {
            "description" : "Description of the table",
            "example" : "AWS S3 Buckets",
            "type" : "string"
          },
          "is_incremental" : {
            "description" : "Whether the table is incremental",
            "type" : "boolean"
          },
          "name" : {
            "$ref" : "#/components/schemas/PluginTableName"
          },
          "parent" : {
            "description" : "Name of the parent table, if any",
            "example" : "nil",
            "type" : "string"
          },
          "relations" : {
            "description" : "Names of the tables that depend on this table",
            "example" : [ "aws_s3_bucket_cors_rules" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "title" : {
            "description" : "Title of the table",
            "example" : "AWS S3 Buckets",
            "type" : "string"
          },
          "is_paid" : {
            "description" : "Whether the table is paid",
            "type" : "boolean"
          }
        },
        "required" : [ "description", "is_incremental", "name", "relations", "title" ],
        "title" : "CloudQuery Plugin Table"
      },
      "PluginTableColumn" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Column",
        "properties" : {
          "description" : {
            "description" : "Description of the column",
            "type" : "string"
          },
          "incremental_key" : {
            "description" : "Whether the column is used as an incremental key",
            "type" : "boolean"
          },
          "name" : {
            "description" : "Name of the column",
            "type" : "string"
          },
          "not_null" : {
            "description" : "Whether the column is nullable",
            "type" : "boolean"
          },
          "primary_key" : {
            "description" : "Whether the column is part of the primary key",
            "type" : "boolean"
          },
          "type" : {
            "description" : "Arrow Type of the column",
            "type" : "string"
          },
          "type_schema" : {
            "description" : "For columns of type JSON, the schema of the JSON object",
            "type" : "string"
          },
          "unique" : {
            "description" : "Whether the column has a unique constraint",
            "type" : "boolean"
          }
        },
        "required" : [ "description", "incremental_key", "name", "not_null", "primary_key", "type", "unique" ],
        "title" : "CloudQuery Plugin Table Column"
      },
      "PluginTableCreate" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Table",
        "properties" : {
          "description" : {
            "description" : "Description of the table",
            "example" : "AWS S3 Buckets",
            "type" : "string"
          },
          "is_incremental" : {
            "description" : "Whether the table is incremental",
            "type" : "boolean"
          },
          "name" : {
            "$ref" : "#/components/schemas/PluginTableName"
          },
          "parent" : {
            "description" : "Name of the parent table, if any",
            "example" : "nil",
            "type" : "string"
          },
          "relations" : {
            "description" : "Names of the tables that depend on this table",
            "example" : [ "aws_s3_bucket_cors_rules" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "title" : {
            "description" : "Title of the table",
            "example" : "AWS S3 Buckets",
            "type" : "string"
          },
          "is_paid" : {
            "description" : "Whether the table is paid",
            "type" : "boolean"
          },
          "columns" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginTableColumn"
            },
            "type" : "array"
          }
        },
        "required" : [ "name" ],
        "title" : "CloudQuery Plugin Table"
      },
      "PluginTableDetails" : {
        "additionalProperties" : false,
        "properties" : {
          "columns" : {
            "description" : "List of columns",
            "items" : {
              "$ref" : "#/components/schemas/PluginTableColumn"
            },
            "type" : "array"
          },
          "description" : {
            "description" : "Description of the table",
            "type" : "string"
          },
          "is_incremental" : {
            "description" : "Whether the table is incremental",
            "type" : "boolean"
          },
          "name" : {
            "description" : "Name of the table",
            "type" : "string"
          },
          "parent" : {
            "description" : "Name of the parent table, if any",
            "type" : "string"
          },
          "relations" : {
            "description" : "Names of the tables that depend on this table",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "title" : {
            "description" : "Title of the table",
            "type" : "string"
          },
          "is_paid" : {
            "description" : "Whether the table is paid",
            "type" : "boolean"
          }
        },
        "required" : [ "columns", "description", "is_incremental", "name", "relations", "title" ]
      },
      "PluginAsset" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Asset",
        "properties" : {
          "checksum" : {
            "description" : "The checksum of the plugin asset",
            "type" : "string"
          },
          "location" : {
            "description" : "The location to download the plugin asset from",
            "format" : "uri",
            "type" : "string"
          }
        },
        "required" : [ "checksum", "location" ],
        "title" : "CloudQuery Plugin Asset"
      },
      "ReleaseURL" : {
        "properties" : {
          "url" : {
            "type" : "string"
          }
        },
        "required" : [ "url" ]
      },
      "PluginUIAssetUploadRequest" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin UI Asset Upload Request",
        "properties" : {
          "name" : {
            "description" : "The path and name of the asset",
            "example" : "scripts/main.js",
            "type" : "string"
          },
          "content_type" : {
            "description" : "Content-type of the asset",
            "example" : "application/json",
            "type" : "string"
          }
        },
        "required" : [ "name" ],
        "title" : "CloudQuery Plugin UI Asset Upload Request"
      },
      "PluginUIAsset" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin UI Asset",
        "properties" : {
          "name" : {
            "description" : "The path and name of the asset",
            "type" : "string"
          },
          "upload_url" : {
            "description" : "URL to upload the asset to",
            "type" : "string",
            "x-go-name" : "UploadURL"
          }
        },
        "required" : [ "name", "upload_url" ],
        "title" : "CloudQuery Plugin UI Asset"
      },
      "AddonName" : {
        "description" : "The unique name for the addon.",
        "example" : "aws-policy",
        "maxLength" : 255,
        "pattern" : "^[a-z](-?[a-z0-9]+)+$",
        "type" : "string"
      },
      "AddonCategory" : {
        "description" : "Supported categories for addons",
        "enum" : [ "cloud-infrastructure", "databases", "sales-marketing", "engineering-analytics", "other" ],
        "type" : "string"
      },
      "AddonType" : {
        "description" : "Supported types for addons",
        "enum" : [ "transformation", "visualization" ],
        "type" : "string"
      },
      "AddonFormat" : {
        "description" : "Supported formats for addons",
        "enum" : [ "zip" ],
        "type" : "string"
      },
      "AddonTier" : {
        "description" : "Supported tiers for addons",
        "enum" : [ "free", "paid" ],
        "type" : "string"
      },
      "Addon" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Addon",
        "properties" : {
          "team_name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "name" : {
            "$ref" : "#/components/schemas/AddonName"
          },
          "official" : {
            "description" : "True if the addon is maintained by CloudQuery, false otherwise",
            "type" : "boolean"
          },
          "category" : {
            "$ref" : "#/components/schemas/AddonCategory"
          },
          "addon_type" : {
            "$ref" : "#/components/schemas/AddonType"
          },
          "addon_format" : {
            "$ref" : "#/components/schemas/AddonFormat"
          },
          "tier" : {
            "$ref" : "#/components/schemas/AddonTier"
          },
          "price_usd" : {
            "description" : "The price for 6 months",
            "example" : "50",
            "pattern" : "^\\d+(?:\\.\\d{1,10})?$",
            "type" : "string",
            "x-go-name" : "PriceUSD"
          },
          "short_description" : {
            "example" : "AWS Asset inventory dashboard for grafana",
            "maxLength" : 512,
            "minLength" : 1,
            "type" : "string"
          },
          "display_name" : {
            "description" : "The addon's display name",
            "example" : "AWS Asset inventory",
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string"
          },
          "homepage" : {
            "example" : "https://cloudquery.io",
            "type" : "string"
          },
          "repository" : {
            "example" : "https://github.com/cloudquery/cloudquery",
            "type" : "string"
          },
          "logo" : {
            "example" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
            "type" : "string"
          },
          "public" : {
            "description" : "Whether the plugin is listed in the CloudQuery Hub. If false, the plugin will not be shown in the CloudQuery Hub and will only be visible to members of the plugin's team.",
            "type" : "boolean"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "addon_format", "addon_type", "category", "created_at", "display_name", "logo", "name", "official", "price_usd", "short_description", "team_name", "tier", "updated_at" ],
        "title" : "CloudQuery Addon"
      },
      "ListAddon" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Addon"
        }, {
          "properties" : {
            "latest_version" : {
              "$ref" : "#/components/schemas/VersionName"
            }
          }
        } ]
      },
      "AddonCreate" : {
        "additionalProperties" : false,
        "description" : "CloudQuery AddonCreate",
        "properties" : {
          "team_name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "name" : {
            "$ref" : "#/components/schemas/AddonName"
          },
          "category" : {
            "$ref" : "#/components/schemas/AddonCategory"
          },
          "addon_type" : {
            "$ref" : "#/components/schemas/AddonType"
          },
          "addon_format" : {
            "$ref" : "#/components/schemas/AddonFormat"
          },
          "tier" : {
            "$ref" : "#/components/schemas/AddonTier"
          },
          "price_usd" : {
            "description" : "The price for 6 months",
            "example" : "50",
            "pattern" : "^\\d+(?:\\.\\d{1,10})?$",
            "type" : "string",
            "x-go-name" : "PriceUSD"
          },
          "short_description" : {
            "example" : "AWS Asset inventory dashboard for grafana",
            "maxLength" : 512,
            "minLength" : 1,
            "type" : "string"
          },
          "display_name" : {
            "description" : "The addon's display name",
            "example" : "AWS Asset inventory",
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string"
          },
          "homepage" : {
            "example" : "https://cloudquery.io",
            "type" : "string"
          },
          "repository" : {
            "example" : "https://github.com/cloudquery/cloudquery",
            "type" : "string"
          },
          "logo" : {
            "example" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
            "pattern" : "^https:\\/\\/storage\\.googleapis\\.com\\/cq-cloud-images\\/[a-z0-9-]+$",
            "type" : "string"
          },
          "public" : {
            "description" : "Whether the plugin is listed in the CloudQuery Hub. If false, the plugin will not be shown in the CloudQuery Hub and will only be visible to members of the plugin's team.",
            "type" : "boolean"
          }
        },
        "required" : [ "addon_format", "addon_type", "category", "display_name", "name", "public", "short_description", "team_name", "tier" ],
        "title" : "CloudQuery Addon"
      },
      "AddonUpdate" : {
        "additionalProperties" : false,
        "description" : "CloudQuery AddonUpdate",
        "properties" : {
          "category" : {
            "$ref" : "#/components/schemas/AddonCategory"
          },
          "addon_format" : {
            "$ref" : "#/components/schemas/AddonFormat"
          },
          "tier" : {
            "$ref" : "#/components/schemas/AddonTier"
          },
          "price_usd" : {
            "description" : "The price for 6 months in USD",
            "example" : "50",
            "pattern" : "^\\d+(?:\\.\\d{1,10})?$",
            "type" : "string",
            "x-go-name" : "PriceUSD"
          },
          "short_description" : {
            "example" : "AWS Asset inventory dashboard for grafana",
            "maxLength" : 512,
            "minLength" : 1,
            "type" : "string"
          },
          "display_name" : {
            "description" : "The addon's display name",
            "example" : "AWS Asset inventory",
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string"
          },
          "homepage" : {
            "example" : "https://cloudquery.io",
            "type" : "string"
          },
          "repository" : {
            "example" : "https://github.com/cloudquery/cloudquery",
            "type" : "string"
          },
          "logo" : {
            "example" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
            "pattern" : "^(https:\\/\\/storage\\.googleapis\\.com\\/cq-cloud-images\\/[a-z0-9-]+)?$",
            "type" : "string"
          },
          "public" : {
            "description" : "Whether the plugin is listed in the CloudQuery Hub. If false, the plugin will not be shown in the CloudQuery Hub and will only be visible to members of the plugin's team.",
            "type" : "boolean"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "title" : "CloudQuery Addon"
      },
      "AddonVersion" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Addon Version",
        "properties" : {
          "created_at" : {
            "description" : "The date and time the plugin version was created.",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "published_at" : {
            "description" : "The date and time the plugin version was set to non-draft (published).",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/VersionName"
          },
          "message" : {
            "description" : "Description of what's new or changed in this version (supports markdown)",
            "example" : "- Added support for *AWS S3* - Added support for *AWS EC2*",
            "type" : "string"
          },
          "doc" : {
            "description" : "Main README in MD format",
            "type" : "string"
          },
          "draft" : {
            "description" : "If a plugin version is in draft, it will not show to members outside the team or be counted as the latest version.",
            "type" : "boolean"
          },
          "plugin_deps" : {
            "description" : "list of plugins the addon depends on in the format of team_name/kind/name@version",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "addon_deps" : {
            "description" : "list of other addons this addon depends on in the format of team_name/type/name@version",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "retracted" : {
            "description" : "If a plugin version is retracted, assets will still be available for download, but the version will be marked as retracted to discourage use.",
            "type" : "boolean"
          },
          "checksum" : {
            "description" : "The checksum of the addon asset",
            "type" : "string"
          }
        },
        "required" : [ "checksum", "created_at", "doc", "draft", "message", "name", "retracted" ],
        "title" : "CloudQuery Addon Version"
      },
      "AddonVersionUpdate" : {
        "properties" : {
          "message" : {
            "description" : "Description of what's new or changed in this version (supports markdown)",
            "example" : "- Added support for *AWS S3* - Added support for *AWS EC2*",
            "type" : "string"
          },
          "doc" : {
            "description" : "Main README in MD format",
            "type" : "string"
          },
          "draft" : {
            "description" : "If a plugin version is in draft, it will not show to members outside the team or be counted as the latest version.",
            "type" : "boolean"
          },
          "plugin_deps" : {
            "description" : "list of plugins the addon depends on in the format of team_name/kind/name@version",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "addon_deps" : {
            "description" : "list of other addons this addon depends on in the format of team_name/type/name@version",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "retracted" : {
            "description" : "If a plugin version is retracted, assets will still be available for download, but the version will be marked as retracted to discourage use.",
            "type" : "boolean"
          },
          "checksum" : {
            "description" : "The checksum of the addon asset",
            "type" : "string"
          }
        }
      },
      "AddonAsset" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Addon Asset",
        "properties" : {
          "checksum" : {
            "description" : "The checksum of the addon asset",
            "type" : "string"
          },
          "location" : {
            "description" : "The location to download the addon asset from",
            "format" : "uri",
            "type" : "string"
          }
        },
        "required" : [ "checksum", "location" ],
        "title" : "CloudQuery Addon Asset"
      },
      "TeamPlan" : {
        "description" : "The plan the team is on (trial is deprecated)",
        "enum" : [ "free", "paid", "enterprise", "trial" ],
        "type" : "string"
      },
      "Team" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Team",
        "properties" : {
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "plan" : {
            "$ref" : "#/components/schemas/TeamPlan"
          },
          "plan_end_time" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "is_trial_active" : {
            "example" : false,
            "type" : "boolean"
          },
          "trial_end_time" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "display_name" : {
            "description" : "The team's display name",
            "example" : "CloudQuery",
            "maxLength" : 255,
            "type" : "string"
          }
        },
        "required" : [ "display_name", "is_trial_active", "name", "plan" ],
        "title" : "Team"
      },
      "TeamImageCreate" : {
        "additionalProperties" : false,
        "properties" : {
          "name" : {
            "description" : "Name of image",
            "maxLength" : 64,
            "minLength" : 1,
            "type" : "string"
          },
          "checksum" : {
            "description" : "SHA1 checksum of image",
            "maxLength" : 40,
            "minLength" : 40,
            "pattern" : "^[a-f0-9]+$",
            "type" : "string"
          }
        },
        "required" : [ "checksum", "name" ],
        "title" : "Create Team Image Request"
      },
      "TeamImage" : {
        "properties" : {
          "name" : {
            "description" : "Name of image",
            "type" : "string"
          },
          "checksum" : {
            "description" : "SHA1 checksum of image",
            "type" : "string"
          },
          "url" : {
            "description" : "URL to download image",
            "type" : "string",
            "x-go-name" : "URL"
          },
          "upload_url" : {
            "description" : "URL to upload image",
            "type" : "string",
            "x-go-name" : "UploadURL"
          }
        },
        "required" : [ "checksum", "name", "url" ]
      },
      "AddonOrderID" : {
        "description" : "ID of the addon order",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "AddonOrderID"
      },
      "AddonOrderStatus" : {
        "enum" : [ "pending", "completed", "cancelled" ],
        "type" : "string"
      },
      "AddonOrder" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Addon Order",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/AddonOrderID"
          },
          "team_name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "addon_team" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "addon_type" : {
            "$ref" : "#/components/schemas/AddonType"
          },
          "addon_name" : {
            "$ref" : "#/components/schemas/AddonName"
          },
          "status" : {
            "$ref" : "#/components/schemas/AddonOrderStatus"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "completed_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "completion_url" : {
            "description" : "Stripe URL for completing purchase. Only shown in response to POST request.",
            "format" : "uri",
            "type" : "string",
            "x-go-name" : "CompletionURL"
          }
        },
        "required" : [ "addon_name", "addon_team", "addon_type", "created_at", "id", "status", "team_name", "updated_at" ],
        "title" : "CloudQuery Addon"
      },
      "AddonOrderCreate" : {
        "additionalProperties" : false,
        "description" : "Create CloudQuery Addon Order",
        "properties" : {
          "addon_team" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "addon_type" : {
            "$ref" : "#/components/schemas/AddonType"
          },
          "addon_name" : {
            "$ref" : "#/components/schemas/AddonName"
          },
          "success_url" : {
            "description" : "URL to redirect to after successful order completion",
            "example" : "https://cloud.cloudquery.io/order-completion",
            "type" : "string"
          },
          "cancel_url" : {
            "description" : "URL to redirect to after order cancellation",
            "example" : "https://cloud.cloudquery.io/order-cancelled",
            "type" : "string"
          }
        },
        "required" : [ "addon_name", "addon_team", "addon_type", "cancel_url", "success_url" ],
        "title" : "Create CloudQuery Addon Order"
      },
      "UserName" : {
        "description" : "The unique name for the user.",
        "example" : "user",
        "maxLength" : 255,
        "pattern" : "^[a-z](-?[a-z0-9]+)+$",
        "type" : "string"
      },
      "User" : {
        "additionalProperties" : false,
        "description" : "CloudQuery User",
        "properties" : {
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "id" : {
            "description" : "ID of the User",
            "example" : "12345678-1234-1234-1234-1234567890ab",
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "ID"
          },
          "email" : {
            "example" : "user@example.com",
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/UserName"
          },
          "updated_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "email", "id" ],
        "title" : "CloudQuery User"
      },
      "MembershipWithUser" : {
        "additionalProperties" : false,
        "properties" : {
          "role" : {
            "example" : "admin",
            "type" : "string"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          }
        },
        "required" : [ "role" ],
        "title" : "CloudQuery User Membership"
      },
      "SpendingLimit" : {
        "additionalProperties" : false,
        "description" : "A configurable spending limit for the team. Empty values indicate no limit.",
        "properties" : {
          "created_at" : {
            "description" : "The date and time the team limit was created.",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "description" : "The date and time the team limit was last updated.",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "usd" : {
            "description" : "The maximum USD amount the team is allowed to use within a calendar month.",
            "example" : 1000,
            "maximum" : 1000000000,
            "minimum" : 0,
            "type" : "integer",
            "x-go-name" : "USD"
          }
        },
        "title" : "Team Spending Limit"
      },
      "SpendingLimitUpdate" : {
        "additionalProperties" : false,
        "description" : "A configurable spending limit for the team.",
        "properties" : {
          "usd" : {
            "description" : "The maximum USD amount the team is allowed to use within a calendar month.",
            "example" : 1000,
            "maximum" : 1000000000,
            "minimum" : 0,
            "type" : "integer",
            "x-go-name" : "USD"
          }
        },
        "required" : [ "usd" ],
        "title" : "Team Spending Limit"
      },
      "SpendingLimitCreate" : {
        "additionalProperties" : false,
        "description" : "A configurable monthly limit for team usage.",
        "properties" : {
          "usd" : {
            "description" : "The maximum USD amount the team is allowed to use within a calendar month.",
            "example" : 1000,
            "maximum" : 1000000000,
            "minimum" : 0,
            "type" : "integer",
            "x-go-name" : "USD"
          }
        },
        "required" : [ "usd" ],
        "title" : "Team Spending Limit"
      },
      "Invoice" : {
        "additionalProperties" : false,
        "description" : "Invoice details",
        "properties" : {
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "amount_due" : {
            "description" : "Amount due in cents. This is the amount that will be charged, unless there are pending invoice items. If the invoice’s total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. The charge that gets generated for the invoice will be for the amount specified in amount_due.",
            "example" : 1000,
            "format" : "int64",
            "type" : "integer"
          },
          "currency" : {
            "example" : "usd",
            "type" : "string"
          },
          "invoice_pdf" : {
            "description" : "The link to download the PDF for the invoice.",
            "format" : "uri",
            "type" : "string",
            "x-go-name" : "InvoicePDF"
          },
          "paid" : {
            "description" : "Whether or not payment was successfully collected for this invoice.",
            "example" : true,
            "type" : "boolean"
          }
        },
        "required" : [ "amount_due", "created_at", "currency", "invoice_pdf", "paid" ],
        "title" : "Invoice"
      },
      "UsageCurrent" : {
        "additionalProperties" : false,
        "description" : "The usage of a plugin within the current calendar month.",
        "properties" : {
          "plugin_team" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "plugin_kind" : {
            "$ref" : "#/components/schemas/PluginKind"
          },
          "plugin_name" : {
            "$ref" : "#/components/schemas/PluginName"
          },
          "rows" : {
            "description" : "The number of rows used by the plugin in the calendar month.",
            "example" : 1000000,
            "format" : "int64",
            "minimum" : 0,
            "type" : "integer"
          },
          "usd" : {
            "deprecated" : true,
            "description" : "The USD amount used by the plugin in the calendar month, rounded to two decimal places.",
            "example" : "43.95",
            "type" : "string",
            "x-go-name" : "USD"
          },
          "remaining_usd" : {
            "deprecated" : true,
            "description" : "The remaining USD amount in the plugin's quota for the calendar month.",
            "example" : "56.05",
            "type" : "string",
            "x-go-name" : "RemainingUSD"
          },
          "remaining_rows" : {
            "deprecated" : true,
            "description" : "Deprecated - this field used to contain the estimated remaining rows but now returns 1 to indicate rows are remaining or 0 if there are no more remaining rows.",
            "example" : 1,
            "format" : "int64",
            "minimum" : 0,
            "type" : "integer"
          }
        },
        "required" : [ "plugin_kind", "plugin_name", "plugin_team", "rows", "usd" ],
        "title" : "CloudQuery Plugin Usage"
      },
      "UsageIncrease" : {
        "additionalProperties" : false,
        "description" : "Increase the usage of a plugin. This can incur billing costs and should be used only by plugins.",
        "properties" : {
          "plugin_team" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "plugin_kind" : {
            "$ref" : "#/components/schemas/PluginKind"
          },
          "plugin_name" : {
            "$ref" : "#/components/schemas/PluginName"
          },
          "tables" : {
            "items" : {
              "$ref" : "#/components/schemas/UsageIncrease_tables_inner"
            },
            "type" : "array"
          },
          "rows" : {
            "description" : "The total number of additional rows used by the plugin.",
            "example" : 1000000,
            "minimum" : 0,
            "type" : "integer"
          },
          "request_id" : {
            "description" : "A unique ID associated with the usage increase.",
            "example" : "123e4567-e89b-12d3-a456-426614174000",
            "format" : "uuid",
            "type" : "string"
          }
        },
        "required" : [ "plugin_kind", "plugin_name", "plugin_team", "request_id", "rows" ],
        "title" : "CloudQuery Plugin Usage Increase"
      },
      "UsageSummaryGroup" : {
        "description" : "A usage summary group.",
        "properties" : {
          "name" : {
            "description" : "The name of the group.",
            "example" : "plugin",
            "type" : "string"
          },
          "value" : {
            "description" : "The value of the group at this index.",
            "example" : "cloudquery/source/aws",
            "type" : "string"
          }
        },
        "required" : [ "name", "value" ],
        "title" : "CloudQuery Usage Summary Group"
      },
      "UsageSummaryValue" : {
        "description" : "A usage summary value.",
        "properties" : {
          "timestamp" : {
            "description" : "The timestamp marking the start of a period.",
            "format" : "date-time",
            "type" : "string"
          },
          "paid_rows" : {
            "description" : "The paid rows that were synced in this period, one per group.",
            "items" : {
              "format" : "int64",
              "type" : "integer"
            },
            "type" : "array"
          },
          "cloud_vcpu_seconds" : {
            "description" : "vCPU/seconds consumed in this period, one per group.",
            "items" : {
              "format" : "int64",
              "type" : "integer"
            },
            "type" : "array"
          },
          "cloud_vram_byte_seconds" : {
            "description" : "vRAM/byte-seconds consumed in this period, one per group.",
            "items" : {
              "format" : "int64",
              "type" : "integer"
            },
            "type" : "array"
          },
          "cloud_egress_bytes" : {
            "description" : "Egress bytes consumed in this period, one per group.",
            "items" : {
              "format" : "int64",
              "type" : "integer"
            },
            "type" : "array"
          }
        },
        "required" : [ "timestamp" ],
        "title" : "CloudQuery Usage Summary Value"
      },
      "UsageSummary" : {
        "additionalProperties" : { },
        "description" : "A usage summary for a team, summarizing the paid rows synced and/or cloud resource usage over a given time range.\nNote that empty or all-zero values are not included in the response.\n",
        "properties" : {
          "groups" : {
            "description" : "The groups of the usage summary. Every group will have a corresponding value at the same index in the values array.",
            "example" : [ {
              "name" : "plugin",
              "value" : "cloudquery/source/aws"
            }, {
              "name" : "plugin",
              "value" : "cloudquery/source/gcp"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/UsageSummaryGroup"
            }
          },
          "values" : {
            "example" : [ {
              "timestamp" : "2021-01-01T00:00:00Z",
              "paid_rows" : [ 100, 200 ]
            }, {
              "timestamp" : "2021-01-02T00:00:00Z",
              "paid_rows" : [ 150, 300 ]
            } ],
            "items" : {
              "$ref" : "#/components/schemas/UsageSummaryValue"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/UsageSummary_metadata"
          }
        },
        "required" : [ "groups", "metadata", "values" ],
        "title" : "CloudQuery Usage Summary"
      },
      "PriceCategorySpend" : {
        "additionalProperties" : false,
        "description" : "Spend by price category for a defined period.",
        "properties" : {
          "category" : {
            "$ref" : "#/components/schemas/PluginPriceCategory"
          },
          "total" : {
            "type" : "string"
          }
        },
        "required" : [ "category", "total" ],
        "title" : "Spend by price category"
      },
      "SpendSummaryValue" : {
        "additionalProperties" : false,
        "description" : "A spend summary value.",
        "properties" : {
          "date" : {
            "description" : "The timestamp for the spend summary.",
            "format" : "date-time",
            "type" : "string"
          },
          "by_category" : {
            "items" : {
              "$ref" : "#/components/schemas/PriceCategorySpend"
            },
            "type" : "array"
          },
          "total" : {
            "description" : "Total spend for the period in USD.",
            "type" : "string"
          }
        },
        "required" : [ "by_category", "date", "total" ],
        "title" : "CloudQuery Spend Summary Value"
      },
      "SpendSummary" : {
        "additionalProperties" : { },
        "description" : "A spend summary for a team, summarizing the spend by each price category over a given time range.\nNote that empty or all-zero values are not included in the response.\n",
        "properties" : {
          "values" : {
            "items" : {
              "$ref" : "#/components/schemas/SpendSummaryValue"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/SpendSummary_metadata"
          }
        },
        "required" : [ "metadata", "values" ],
        "title" : "CloudQuery Spend Summary"
      },
      "Email" : {
        "example" : "user@example.com",
        "format" : "email",
        "type" : "string"
      },
      "Invitation" : {
        "additionalProperties" : false,
        "properties" : {
          "team_name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "email" : {
            "$ref" : "#/components/schemas/Email"
          },
          "role" : {
            "example" : "admin",
            "type" : "string"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "created_at", "email", "role", "team_name" ]
      },
      "MembershipWithTeam" : {
        "additionalProperties" : false,
        "properties" : {
          "role" : {
            "example" : "admin",
            "type" : "string"
          },
          "team" : {
            "$ref" : "#/components/schemas/Team"
          }
        },
        "required" : [ "role" ],
        "title" : "CloudQuery Team Membership"
      },
      "TeamSubscriptionOrderID" : {
        "description" : "ID of the team subscription order",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "TeamSubscriptionOrderID"
      },
      "TeamSubscriptionOrderStatus" : {
        "enum" : [ "pending", "completed", "cancelled" ],
        "type" : "string"
      },
      "TeamSubscriptionOrder" : {
        "additionalProperties" : false,
        "description" : "Team subscription order",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/TeamSubscriptionOrderID"
          },
          "team_name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "plan" : {
            "$ref" : "#/components/schemas/TeamPlan"
          },
          "status" : {
            "$ref" : "#/components/schemas/TeamSubscriptionOrderStatus"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "completed_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "completion_url" : {
            "description" : "Stripe URL for completing purchase. Only shown in response to POST request when a paid plan is selected.",
            "format" : "uri",
            "type" : "string",
            "x-go-name" : "CompletionURL"
          }
        },
        "required" : [ "created_at", "id", "plan", "status", "team_name", "updated_at" ],
        "title" : "Team subscription order"
      },
      "TeamSubscriptionOrderCreate" : {
        "additionalProperties" : false,
        "description" : "Create team subscription order",
        "properties" : {
          "plan" : {
            "$ref" : "#/components/schemas/TeamPlan"
          },
          "success_url" : {
            "description" : "URL to redirect to after successful order completion",
            "example" : "https://cloud.cloudquery.io/order-completion",
            "type" : "string"
          },
          "cancel_url" : {
            "description" : "URL to redirect to after order cancellation",
            "example" : "https://cloud.cloudquery.io/order-cancelled",
            "type" : "string"
          }
        },
        "required" : [ "cancel_url", "plan", "success_url" ],
        "title" : "Create team subscription order"
      },
      "InvitationWithToken" : {
        "additionalProperties" : false,
        "allOf" : [ {
          "$ref" : "#/components/schemas/Invitation"
        }, {
          "properties" : {
            "token" : {
              "description" : "The token used to accept the invitation",
              "format" : "uuid",
              "type" : "string"
            }
          },
          "required" : [ "token" ]
        } ]
      },
      "UserID" : {
        "description" : "ID of the User",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "UserID"
      },
      "APIKeyName" : {
        "description" : "Name of the API key",
        "example" : "cli-api-key",
        "maxLength" : 255,
        "minLength" : 1,
        "pattern" : "^(?:[a-zA-Z0-9][a-zA-Z0-9- ]*)?[a-zA-Z0-9]$",
        "type" : "string"
      },
      "APIKeyID" : {
        "description" : "ID of the API key",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "APIKeyID"
      },
      "APIKeyScope" : {
        "description" : "Scope of permissions for the API key. API keys are used for creating new plugin versions and downloading existing plugins",
        "enum" : [ "read-and-write" ],
        "type" : "string"
      },
      "APIKey" : {
        "description" : "API Key to interact with CloudQuery Cloud under specific team",
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/APIKeyName"
          },
          "created_by" : {
            "description" : "email of the user that created the API key",
            "example" : "user@example.com",
            "type" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/APIKeyID"
          },
          "key" : {
            "description" : "API key. Will be shown only in the response when creating the key.",
            "example" : "1234567890abcdef1234567890abcdef",
            "type" : "string"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "expires_at" : {
            "description" : "Timestamp at which API key will stop working",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "expired" : {
            "description" : "Whether the API key has expired or not",
            "example" : false,
            "type" : "boolean"
          },
          "scope" : {
            "$ref" : "#/components/schemas/APIKeyScope"
          }
        },
        "required" : [ "expired", "expires_at", "id", "name", "scope" ]
      },
      "RegistryAuthToken" : {
        "additionalProperties" : false,
        "description" : "JWT token for the image registry",
        "properties" : {
          "access_token" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          }
        },
        "required" : [ "access_token", "token" ]
      },
      "DockerError" : {
        "additionalProperties" : false,
        "description" : "Error Returned from the Docker Authorization Handler to the Docker Registry",
        "properties" : {
          "details" : {
            "type" : "string"
          }
        },
        "required" : [ "details" ],
        "title" : "Docker Error"
      },
      "SyncPluginPath" : {
        "description" : "Plugin path in CloudQuery registry",
        "pattern" : "^cloudquery/[^/]+",
        "type" : "string"
      },
      "SyncEnvCreate" : {
        "description" : "Environment variable. Environment variables are assumed to be secret.",
        "properties" : {
          "name" : {
            "description" : "Name of the environment variable",
            "type" : "string"
          },
          "value" : {
            "description" : "Value of the environment variable",
            "type" : "string"
          }
        },
        "required" : [ "name" ]
      },
      "SyncLastUpdateSource" : {
        "description" : "How was the source or destination been created or updated last",
        "enum" : [ "yaml", "ui" ],
        "type" : "string"
      },
      "ConnectorID" : {
        "description" : "ID of the Connector",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "ConnectorID"
      },
      "SyncSourceCreate" : {
        "description" : "Sync Source Definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the source. The name can only contain ASCII letters, digits, - and _.",
            "example" : "my-source-definition",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "type" : "string"
          },
          "path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "version" : {
            "description" : "Version of the plugin",
            "example" : "v1.2.3",
            "type" : "string"
          },
          "tables" : {
            "description" : "Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "skip_tables" : {
            "description" : "Tables matched by `tables` that should be skipped. Wildcards are supported.",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin",
            "type" : "object"
          },
          "env" : {
            "description" : "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            },
            "type" : "array"
          },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          },
          "connector_id" : {
            "$ref" : "#/components/schemas/ConnectorID"
          }
        },
        "required" : [ "name", "path", "tables", "version" ],
        "title" : "Sync Source definition for creating a new source"
      },
      "SyncEnv" : {
        "description" : "Environment variable. Environment variables are assumed to be secret.",
        "properties" : {
          "name" : {
            "description" : "Name of the environment variable",
            "type" : "string"
          }
        },
        "required" : [ "name" ]
      },
      "SyncSource" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SyncSourceCreate"
        }, {
          "properties" : {
            "created_at" : {
              "description" : "Time when the source was created",
              "example" : "2023-07-14T16:53:42Z",
              "format" : "date-time",
              "type" : "string"
            },
            "updated_at" : {
              "description" : "Time when the source was last updated",
              "example" : "2023-07-14T16:53:42Z",
              "format" : "date-time",
              "type" : "string"
            },
            "env" : {
              "description" : "Environment variables for the plugin.",
              "items" : {
                "$ref" : "#/components/schemas/SyncEnv"
              },
              "type" : "array"
            },
            "draft" : {
              "description" : "If a sync source is in draft, it cannot be used in syncs. To get it out of draft, 'promote' it using a successful test connection ID.",
              "type" : "boolean"
            }
          },
          "required" : [ "created_at", "draft", "env", "updated_at" ]
        } ]
      },
      "SyncTestConnectionID" : {
        "description" : "unique ID of the test connection",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "ID"
      },
      "SyncTestConnectionStatus" : {
        "description" : "The status of the sync run",
        "enum" : [ "completed", "failed", "started", "created" ],
        "type" : "string"
      },
      "SyncTestConnection" : {
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/SyncTestConnectionID"
          },
          "status" : {
            "$ref" : "#/components/schemas/SyncTestConnectionStatus"
          },
          "failure_reason" : {
            "description" : "Reason for failure",
            "example" : "password authentication failed for user \"exampleuser\"",
            "type" : "string"
          },
          "failure_code" : {
            "description" : "Code for failure",
            "example" : "INVALID_CREDENTIALS",
            "type" : "string"
          },
          "created_at" : {
            "description" : "Time the test connection was created",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "completed_at" : {
            "description" : "Time the test connection was completed",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "plugin_path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "plugin_version" : {
            "$ref" : "#/components/schemas/VersionName"
          },
          "plugin_kind" : {
            "$ref" : "#/components/schemas/PluginKind"
          }
        },
        "required" : [ "created_at", "id", "status" ]
      },
      "SyncSourceUpdate" : {
        "description" : "Sync Source Update Definition",
        "properties" : {
          "path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "version" : {
            "description" : "Version of the plugin",
            "example" : "v1.2.3",
            "type" : "string"
          },
          "tables" : {
            "description" : "Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "skip_tables" : {
            "description" : "Tables matched by `tables` that should be skipped. Wildcards are supported.",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin",
            "type" : "object"
          },
          "env" : {
            "description" : "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            },
            "type" : "array"
          },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          },
          "connector_id" : {
            "$ref" : "#/components/schemas/ConnectorID"
          }
        },
        "title" : "Sync Source definition for updating a source"
      },
      "SyncTestConnectionCreate" : {
        "properties" : {
          "path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "version" : {
            "description" : "Version of the plugin",
            "example" : "v1.2.3",
            "type" : "string"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin",
            "type" : "object"
          },
          "env" : {
            "description" : "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            },
            "type" : "array"
          },
          "connector_id" : {
            "$ref" : "#/components/schemas/ConnectorID"
          }
        },
        "required" : [ "path", "version" ],
        "title" : "Sync Test Connection creation definition"
      },
      "SyncDestinationWriteMode" : {
        "default" : "overwrite-delete-stale",
        "description" : "Write mode for the destination",
        "enum" : [ "append", "overwrite", "overwrite-delete-stale" ],
        "type" : "string"
      },
      "SyncDestinationMigrateMode" : {
        "default" : "safe",
        "description" : "Migrate mode for the destination",
        "enum" : [ "safe", "forced" ],
        "type" : "string"
      },
      "SyncDestinationCreate" : {
        "description" : "Sync Destination Definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the destination. The name can only contain ASCII letters, digits, - and _.",
            "example" : "my-destination-definition",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "type" : "string"
          },
          "path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "version" : {
            "description" : "Version of the plugin",
            "example" : "v1.2.3",
            "type" : "string"
          },
          "write_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationWriteMode"
          },
          "migrate_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationMigrateMode"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin",
            "type" : "object"
          },
          "env" : {
            "description" : "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            },
            "type" : "array"
          },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          },
          "connector_id" : {
            "$ref" : "#/components/schemas/ConnectorID"
          }
        },
        "required" : [ "name", "path", "version" ],
        "title" : "Sync Destination definition for creating a new destination"
      },
      "SyncDestination" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SyncDestinationCreate"
        }, {
          "properties" : {
            "created_at" : {
              "description" : "Time when the source was created",
              "example" : "2023-07-14T16:53:42Z",
              "format" : "date-time",
              "type" : "string"
            },
            "updated_at" : {
              "description" : "Time when the source was last updated",
              "example" : "2023-07-14T16:53:42Z",
              "format" : "date-time",
              "type" : "string"
            },
            "env" : {
              "description" : "Environment variables for the plugin.",
              "items" : {
                "$ref" : "#/components/schemas/SyncEnv"
              },
              "type" : "array"
            },
            "draft" : {
              "description" : "If a sync destination is in draft, it cannot be used in syncs. To get it out of draft, 'promote' it using a successful test connection ID.",
              "type" : "boolean"
            }
          },
          "required" : [ "created_at", "draft", "env", "updated_at" ]
        } ]
      },
      "SyncDestinationUpdate" : {
        "description" : "Sync Destination Update Definition",
        "properties" : {
          "path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "version" : {
            "description" : "Version of the plugin",
            "example" : "v1.2.3",
            "type" : "string"
          },
          "write_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationWriteMode"
          },
          "migrate_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationMigrateMode"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin",
            "type" : "object"
          },
          "env" : {
            "description" : "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            },
            "type" : "array"
          },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          },
          "connector_id" : {
            "$ref" : "#/components/schemas/ConnectorID"
          }
        },
        "title" : "Sync Destination definition for updating a destination"
      },
      "Sync" : {
        "description" : "Managed Sync definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the sync. The name can only contain ASCII letters, digits, - and _.",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "type" : "string"
          },
          "source" : {
            "description" : "Unique name of the source",
            "type" : "string"
          },
          "destinations" : {
            "description" : "List of destinations for the sync",
            "items" : {
              "description" : "Unique name of the destination",
              "type" : "string"
            },
            "type" : "array"
          },
          "disabled" : {
            "description" : "Whether the sync is disabled",
            "type" : "boolean"
          },
          "schedule" : {
            "description" : "Cron schedule for the sync",
            "type" : "string"
          },
          "cpu" : {
            "description" : "CPU quota for the sync",
            "example" : "1",
            "type" : "string",
            "x-go-name" : "CPU"
          },
          "memory" : {
            "description" : "Memory quota for the sync",
            "example" : "2Gi",
            "type" : "string"
          },
          "created_at" : {
            "description" : "Time when the sync was created",
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "description" : "Time when the sync was updated",
            "format" : "date-time",
            "type" : "string"
          },
          "created_by" : {
            "type" : "string"
          }
        },
        "required" : [ "cpu", "created_at", "destinations", "disabled", "memory", "name", "schedule", "source", "updated_at" ]
      },
      "SyncCreate" : {
        "description" : "Managed Sync definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the sync. The name can only contain ASCII letters, digits, - and _.",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "type" : "string"
          },
          "source" : {
            "description" : "Unique name of the source",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "type" : "string"
          },
          "destinations" : {
            "items" : {
              "description" : "Unique name of the destination",
              "pattern" : "^[a-zA-Z0-9_-]+$",
              "type" : "string"
            },
            "minItems" : 1,
            "type" : "array"
          },
          "schedule" : {
            "description" : "Cron schedule for the sync",
            "type" : "string"
          },
          "disabled" : {
            "default" : false,
            "description" : "Whether the sync is disabled",
            "type" : "boolean"
          },
          "cpu" : {
            "default" : "1",
            "description" : "CPU quota for the sync",
            "type" : "string",
            "x-go-name" : "CPU"
          },
          "memory" : {
            "default" : "2Gi",
            "description" : "Memory quota for the sync",
            "type" : "string"
          }
        },
        "required" : [ "destinations", "name", "source" ]
      },
      "SyncUpdate" : {
        "description" : "Managed Sync definition",
        "properties" : {
          "source" : {
            "description" : "Unique name of the source",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "type" : "string"
          },
          "destinations" : {
            "items" : {
              "description" : "Unique name of the destination",
              "pattern" : "^[a-zA-Z0-9_-]+$",
              "type" : "string"
            },
            "minItems" : 1,
            "type" : "array"
          },
          "schedule" : {
            "description" : "Cron schedule for the sync",
            "type" : "string"
          },
          "disabled" : {
            "default" : false,
            "description" : "Whether the sync is disabled",
            "type" : "boolean"
          },
          "env" : {
            "description" : "Environment variables for the sync",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnv"
            },
            "type" : "array"
          },
          "cpu" : {
            "default" : "1",
            "description" : "CPU quota for the sync",
            "type" : "string",
            "x-go-name" : "CPU"
          },
          "memory" : {
            "default" : "2Gi",
            "description" : "Memory quota for the sync",
            "type" : "string"
          }
        }
      },
      "SyncRunStatus" : {
        "description" : "The status of the sync run",
        "enum" : [ "completed", "failed", "started", "cancelled", "created" ],
        "type" : "string"
      },
      "SyncRunStatusReason" : {
        "description" : "The reason for the status",
        "enum" : [ "error", "oom_killed" ],
        "type" : "string"
      },
      "SyncRun" : {
        "description" : "Managed Sync Run definition",
        "properties" : {
          "sync_name" : {
            "description" : "Name of the sync",
            "type" : "string"
          },
          "id" : {
            "description" : "unique ID of the run",
            "example" : "12345678-1234-1234-1234-1234567890ab",
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "ID"
          },
          "status" : {
            "$ref" : "#/components/schemas/SyncRunStatus"
          },
          "status_reason" : {
            "$ref" : "#/components/schemas/SyncRunStatusReason"
          },
          "created_at" : {
            "description" : "Time the sync run was created",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "completed_at" : {
            "description" : "Time the sync run was completed",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "total_rows" : {
            "description" : "Total number of rows in the sync",
            "format" : "int64",
            "type" : "integer"
          },
          "warnings" : {
            "description" : "Number of warnings encountered during the sync",
            "format" : "int64",
            "type" : "integer"
          },
          "errors" : {
            "description" : "Number of errors encountered during the sync",
            "format" : "int64",
            "type" : "integer"
          }
        },
        "required" : [ "created_at", "errors", "id", "status", "sync_name", "total_rows", "warnings" ]
      },
      "SyncRunID" : {
        "description" : "ID of the SyncRun",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "SyncRunID"
      },
      "SyncRunDetails" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SyncRun"
        }, {
          "properties" : {
            "cpu_seconds" : {
              "description" : "Total CPU seconds utilized during this sync run",
              "format" : "double",
              "type" : "number",
              "x-go-name" : "CPUSeconds"
            },
            "memory_byte_seconds" : {
              "description" : "Total memory byte seconds utilized during this sync run",
              "format" : "double",
              "type" : "number"
            },
            "network_egress_bytes" : {
              "description" : "Total network egress bytes during this sync run",
              "format" : "double",
              "type" : "number"
            }
          }
        } ]
      },
      "ConnectorIdentityResponseAWS" : {
        "additionalProperties" : false,
        "description" : "AWS connector identity response",
        "properties" : {
          "role_arn" : {
            "description" : "Role ARN to assume",
            "type" : "string",
            "x-go-name" : "RoleARN"
          },
          "account_ids" : {
            "description" : "List of AWS account IDs",
            "items" : {
              "type" : "string"
            },
            "type" : "array",
            "x-go-name" : "AccountIDs"
          }
        },
        "required" : [ "account_ids", "role_arn" ]
      },
      "ConnectorCredentialsResponseAWS" : {
        "additionalProperties" : false,
        "description" : "AWS connector credentials response",
        "properties" : {
          "access_key_id" : {
            "type" : "string"
          },
          "secret_access_key" : {
            "type" : "string"
          },
          "session_token" : {
            "type" : "string"
          },
          "source" : {
            "type" : "string"
          },
          "can_expire" : {
            "type" : "boolean"
          },
          "expires" : {
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "access_key_id", "can_expire", "expires", "secret_access_key", "session_token", "source" ]
      },
      "ConnectorCredentialsResponseOAuth" : {
        "additionalProperties" : false,
        "description" : "OAuth connector credentials response",
        "properties" : {
          "access_token" : {
            "type" : "string"
          },
          "expires" : {
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "access_token" ]
      },
      "SyncSourceCreateFromTestConnection" : {
        "description" : "Sync Source from Test Connection Definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the source. The name can only contain ASCII letters, digits, - and _.",
            "example" : "my-source-definition",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "type" : "string"
          },
          "tables" : {
            "description" : "Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "skip_tables" : {
            "description" : "Tables matched by `tables` that should be skipped. Wildcards are supported.",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          }
        },
        "required" : [ "name", "tables" ],
        "title" : "Sync Source definition for creating a new source from a test connection"
      },
      "SyncDestinationCreateFromTestConnection" : {
        "description" : "Sync Destination from Test Connection Definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the destination. The name can only contain ASCII letters, digits, - and _.",
            "example" : "my-destination-definition",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "type" : "string"
          },
          "write_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationWriteMode"
          },
          "migrate_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationMigrateMode"
          },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          }
        },
        "required" : [ "name" ],
        "title" : "Sync Destination definition for creating a new destination from a test connection"
      },
      "SyncSourceUpdateFromTestConnection" : {
        "description" : "Sync Source Update from Test Connection Definition",
        "properties" : {
          "tables" : {
            "description" : "Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "skip_tables" : {
            "description" : "Tables matched by `tables` that should be skipped. Wildcards are supported.",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          }
        },
        "title" : "Sync Source definition for updating a source from a test connection"
      },
      "SyncDestinationUpdateFromTestConnection" : {
        "description" : "Sync Destination Update from Test Connection Definition",
        "properties" : {
          "write_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationWriteMode"
          },
          "migrate_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationMigrateMode"
          },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          }
        },
        "title" : "Sync Destination definition for updating a destination from a test connection"
      },
      "ManagedDatabaseID" : {
        "description" : "The identifier for the managed database",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "ManagedDatabaseID"
      },
      "ManagedDatabaseStatus" : {
        "description" : "The status of the managed database",
        "enum" : [ "pending", "ready", "failed", "expired" ],
        "type" : "string"
      },
      "ManagedDatabase" : {
        "description" : "Managed Database definition",
        "properties" : {
          "created_at" : {
            "description" : "Time the managed database was created",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "connection_string" : {
            "description" : "The connection string to the database",
            "type" : "string"
          },
          "expiration" : {
            "description" : "Time the managed database should expire",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/ManagedDatabaseID"
          },
          "status" : {
            "$ref" : "#/components/schemas/ManagedDatabaseStatus"
          }
        },
        "required" : [ "created_at", "id", "status" ]
      },
      "ManagedDatabaseCreate" : {
        "description" : "Managed Database creation",
        "type" : "object"
      },
      "ConnectorStatus" : {
        "description" : "The status of the connector",
        "enum" : [ "created", "authenticated", "failed", "revoked" ],
        "type" : "string"
      },
      "Connector" : {
        "description" : "Connector definition",
        "properties" : {
          "id" : {
            "description" : "unique ID of the connector",
            "example" : "12345678-1234-1234-1234-1234567890ab",
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "ID"
          },
          "type" : {
            "description" : "Type of the connector",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the connector",
            "type" : "string"
          },
          "status" : {
            "$ref" : "#/components/schemas/ConnectorStatus"
          },
          "created_at" : {
            "description" : "Time the connector was created",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "created_at", "id", "name", "status", "type" ]
      },
      "ConnectorCreate" : {
        "description" : "Connector creation request",
        "properties" : {
          "type" : {
            "description" : "Type of the connector",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the connector",
            "type" : "string"
          }
        },
        "required" : [ "name", "type" ]
      },
      "ConnectorUpdate" : {
        "additionalProperties" : false,
        "properties" : {
          "name" : {
            "description" : "Name of the connector",
            "type" : "string"
          }
        }
      },
      "ConnectorAuthRequestAWS" : {
        "additionalProperties" : false,
        "description" : "AWS connector authentication request to start the authentication process",
        "properties" : {
          "plugin_team" : {
            "description" : "Team that owns the plugin we are authenticating the connector for",
            "example" : "cloudquery",
            "type" : "string"
          },
          "plugin_kind" : {
            "description" : "Kind of the plugin",
            "example" : "source",
            "type" : "string"
          },
          "plugin_name" : {
            "description" : "Name of the plugin",
            "example" : "aws",
            "type" : "string"
          },
          "account_ids" : {
            "description" : "List of AWS account IDs to authenticate",
            "example" : [ "123456789012" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array",
            "x-go-name" : "AccountIDs"
          }
        },
        "required" : [ "plugin_kind", "plugin_name", "plugin_team" ]
      },
      "ConnectorAuthResponseAWS" : {
        "additionalProperties" : false,
        "description" : "AWS connector authentication response to start the authentication process",
        "properties" : {
          "redirect_url" : {
            "description" : "URL to redirect the user to, to authenticate",
            "type" : "string",
            "x-go-name" : "RedirectURL"
          },
          "role_template_url" : {
            "description" : "URL to the role template, to present to the user",
            "type" : "string",
            "x-go-name" : "RoleTemplateURL"
          },
          "suggested_external_id" : {
            "description" : "External ID suggested to enter into the role definition",
            "type" : "string",
            "x-go-name" : "SuggestedExternalID"
          },
          "suggested_policy_arns" : {
            "description" : "List of AWS policy ARNs suggested to grant inside the role definition",
            "items" : {
              "type" : "string"
            },
            "type" : "array",
            "x-go-name" : "SuggestedPolicyARNs"
          }
        },
        "required" : [ "redirect_url", "role_template_url", "suggested_external_id", "suggested_policy_arns" ]
      },
      "ConnectorAuthFinishRequestAWS" : {
        "additionalProperties" : false,
        "description" : "AWS connector authentication request, filled in after the user has authenticated through AWS",
        "properties" : {
          "role_arn" : {
            "description" : "ARN of role created by the user",
            "type" : "string",
            "x-go-name" : "RoleARN"
          },
          "external_id" : {
            "description" : "External ID in the role definition. Optional. If not provided the previously suggested external ID will be used. Empty string will remove the external ID.",
            "type" : "string",
            "x-go-name" : "ExternalID"
          }
        },
        "required" : [ "role_arn" ]
      },
      "ConnectorAuthRequestOAuth" : {
        "additionalProperties" : { },
        "description" : "OAuth connector authentication request to start the authentication process",
        "properties" : {
          "plugin_team" : {
            "description" : "Team that owns the plugin we are authenticating the connector for",
            "example" : "cloudquery"
          },
          "plugin_kind" : {
            "description" : "Kind of the plugin",
            "example" : "source"
          },
          "plugin_name" : {
            "description" : "Name of the plugin",
            "example" : "googleanalytics"
          },
          "base_url" : {
            "description" : "Base of the URL the callback url will be constructed from",
            "example" : "https://cloud.cloudquery.io/oauth",
            "x-go-name" : "BaseURL"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin",
            "type" : "object"
          },
          "env" : {
            "description" : "Environment variables used in the spec.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            }
          }
        },
        "required" : [ "base_url", "plugin_kind", "plugin_name", "plugin_team" ]
      },
      "ConnectorAuthResponseOAuth" : {
        "additionalProperties" : false,
        "description" : "OAuth connector authentication response to start the authentication process",
        "properties" : {
          "redirect_url" : {
            "description" : "URL to redirect the user to, to authenticate",
            "type" : "string",
            "x-go-name" : "RedirectURL"
          }
        },
        "required" : [ "redirect_url" ]
      },
      "ConnectorAuthFinishRequestOAuth" : {
        "additionalProperties" : { },
        "description" : "OAuth connector authentication request, filled in after the user has authenticated through OAuth",
        "properties" : {
          "auth_code" : {
            "description" : "Auth code received from the OAuth provider"
          },
          "base_url" : {
            "description" : "Base of the URL the callback url was constructed from",
            "example" : "https://cloud.cloudquery.io/oauth",
            "x-go-name" : "BaseURL"
          },
          "state" : {
            "description" : "State value received from the OAuth provider"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin",
            "type" : "object"
          },
          "env" : {
            "description" : "Environment variables used in the spec.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            }
          }
        },
        "required" : [ "auth_code", "base_url" ]
      },
      "ListPluginNotificationRequests_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginNotificationRequest"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListPlugins_200_response" : {
        "properties" : {
          "items" : {
            "example" : [ {
              "name" : "aws",
              "kind" : "source",
              "team_name" : "cloudquery",
              "display_name" : "AWS Source Plugin",
              "category" : "cloud-infrastructure",
              "created_at" : "2017-07-14T16:53:42Z",
              "updated_at" : "2017-07-14T16:53:42Z",
              "homepage" : "https://cloudquery.io",
              "logo" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
              "official" : true,
              "short_description" : "Sync data from AWS to any destination",
              "repository" : "https://github.com/cloudquery/cloudquery",
              "tier" : "paid",
              "usd_per_row" : "0.00123",
              "free_rows_per_month" : 10000,
              "release_stage" : "preview"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/ListPlugin"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListPluginUpcomingPriceChanges_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginPrice"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListPluginVersions_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginVersionList"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "CreatePluginVersion_request" : {
        "properties" : {
          "message" : {
            "description" : "A message describing what's new or changed in this version.\nThis message will be displayed to users in the plugin's changelog.\nSupports limited markdown syntax.\n",
            "maxLength" : 30000,
            "minLength" : 1,
            "type" : "string"
          },
          "protocols" : {
            "$ref" : "#/components/schemas/PluginProtocols"
          },
          "supported_targets" : {
            "description" : "The targets supported by this plugin version, formatted as <os>_<arch>",
            "example" : [ "linux_arm64", "darwin_amd64", "windows_amd64" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "checksums" : {
            "description" : "List of SHA-256 checksums for this plugin version, one for each supported target.",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "package_type" : {
            "$ref" : "#/components/schemas/PluginPackageType"
          },
          "spec_json_schema" : {
            "$ref" : "#/components/schemas/PluginSpecJSONSchema"
          }
        },
        "required" : [ "checksums", "message", "package_type", "protocols", "supported_targets" ]
      },
      "ListPluginVersionDocs_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginDocsPage"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "CreatePluginVersionDocs_request" : {
        "properties" : {
          "pages" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginDocsPageCreate"
            },
            "type" : "array"
          }
        },
        "required" : [ "pages" ]
      },
      "CreatePluginVersionDocs_201_response" : {
        "properties" : {
          "names" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginDocsPageName"
            },
            "type" : "array"
          }
        }
      },
      "DeletePluginVersionDocs_request" : {
        "properties" : {
          "names" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginDocsPageName"
            },
            "type" : "array"
          }
        },
        "required" : [ "names" ]
      },
      "ListPluginVersionTables_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginTable"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "CreatePluginVersionTables_request" : {
        "properties" : {
          "tables" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginTableCreate"
            },
            "type" : "array"
          }
        },
        "required" : [ "tables" ]
      },
      "CreatePluginVersionTables_201_response" : {
        "properties" : {
          "names" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginTableName"
            },
            "type" : "array"
          }
        }
      },
      "DeletePluginVersionTables_request" : {
        "properties" : {
          "names" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginTableName"
            },
            "type" : "array"
          }
        },
        "required" : [ "names" ]
      },
      "FinalizePluginUIAssetUpload_request" : {
        "properties" : {
          "ui_id" : {
            "description" : "ID representing the finished upload",
            "type" : "string",
            "x-go-name" : "UIID"
          }
        },
        "required" : [ "ui_id" ]
      },
      "UploadPluginUIAssets_request" : {
        "properties" : {
          "assets" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginUIAssetUploadRequest"
            },
            "type" : "array"
          }
        },
        "required" : [ "assets" ]
      },
      "UploadPluginUIAssets_201_response" : {
        "properties" : {
          "ui_id" : {
            "description" : "ID representing this upload",
            "type" : "string",
            "x-go-name" : "UIID"
          },
          "assets" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginUIAsset"
            },
            "type" : "array"
          }
        },
        "required" : [ "assets", "ui_id" ]
      },
      "ListAddons_200_response" : {
        "properties" : {
          "items" : {
            "example" : [ {
              "name" : "aws-policies",
              "team_name" : "cloudquery",
              "display_name" : "AWS Policies",
              "category" : "cloud-infrastructure",
              "created_at" : "2017-07-14T16:53:42Z",
              "updated_at" : "2017-07-14T16:53:42Z",
              "homepage" : "https://cloudquery.io",
              "logo" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
              "official" : true,
              "short_description" : "Sync data from AWS to any destination",
              "repository" : "https://github.com/cloudquery/cloudquery",
              "tier" : "free",
              "price_usd" : "50",
              "addon_type" : "visualization",
              "addon_format" : "zip"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/ListAddon"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListAddonVersions_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/AddonVersion"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "CreateAddonVersion_request" : {
        "properties" : {
          "message" : {
            "description" : "A message describing what's new or changed in this version.\nThis message will be displayed to users in the addon's changelog.\nSupports limited markdown syntax.\n",
            "maxLength" : 30000,
            "minLength" : 1,
            "type" : "string"
          },
          "doc" : {
            "description" : "Main README in MD format",
            "type" : "string"
          },
          "plugin_deps" : {
            "description" : "plugin dependencies in the format of ['team_name/kind/plugin_name@version']",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "addon_deps" : {
            "description" : "addon dependencies in the format of ['team_name/type/addon_name@version']",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "checksum" : {
            "description" : "SHA-256 checksum for the addon asset",
            "type" : "string"
          }
        },
        "required" : [ "checksum", "doc", "message" ]
      },
      "ListTeams_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/Team"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "CreateTeam_request" : {
        "additionalProperties" : { },
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "display_name" : {
            "description" : "The team's display name",
            "maxLength" : 255,
            "minLength" : 1
          }
        },
        "required" : [ "display_name", "name" ]
      },
      "UpdateTeam_request" : {
        "additionalProperties" : { },
        "properties" : {
          "display_name" : {
            "description" : "The team's display name"
          }
        }
      },
      "CreateTeamImages_request" : {
        "properties" : {
          "images" : {
            "items" : {
              "$ref" : "#/components/schemas/TeamImageCreate"
            },
            "minItems" : 1,
            "type" : "array"
          }
        },
        "required" : [ "images" ]
      },
      "CreateTeamImages_201_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/TeamImage"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListPluginsByTeam_200_response" : {
        "properties" : {
          "items" : {
            "example" : [ {
              "name" : "aws-source",
              "kind" : "source",
              "team_name" : "cloudquery",
              "display_name" : "AWS Source Plugin",
              "category" : "cloud-infrastructure",
              "created_at" : "2017-07-14T16:53:42Z",
              "updated_at" : "2017-07-14T16:53:42Z",
              "homepage" : "https://cloudquery.io",
              "logo" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
              "official" : true,
              "short_description" : "Sync data from AWS to any destination",
              "repository" : "https://github.com/cloudquery/cloudquery",
              "tier" : "paid",
              "usd_per_row" : "0.00123",
              "free_rows_per_month" : 10000,
              "release_stage" : "preview"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/Plugin"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListAddonsByTeam_200_response" : {
        "properties" : {
          "items" : {
            "example" : [ {
              "name" : "aws-policies",
              "team_name" : "cloudquery",
              "display_name" : "AWS Policies",
              "category" : "cloud-infrastructure",
              "created_at" : "2017-07-14T16:53:42Z",
              "updated_at" : "2017-07-14T16:53:42Z",
              "homepage" : "https://cloudquery.io",
              "logo" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
              "official" : true,
              "short_description" : "AWS policies",
              "repository" : "https://github.com/cloudquery/cloudquery",
              "tier" : "paid",
              "price_usd" : "50",
              "addon_type" : "visualization",
              "addon_format" : "zip"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/Addon"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListAddonOrdersByTeam_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/AddonOrder"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "GetTeamMemberships_200_response" : {
        "properties" : {
          "items" : {
            "example" : [ {
              "role" : "admin",
              "user" : {
                "created_at" : "2017-07-14T16:53:42Z",
                "email" : "user@example.com",
                "id" : "12345678-1234-1234-1234-1234567890ab",
                "name" : "user",
                "updated_at" : "2017-07-14T16:53:42Z"
              }
            } ],
            "items" : {
              "$ref" : "#/components/schemas/MembershipWithUser"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "RemoveTeamMembership_request" : {
        "properties" : {
          "email" : {
            "type" : "string"
          }
        },
        "required" : [ "email" ]
      },
      "ListInvoicesByTeam_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListTeamPluginUsage_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/UsageCurrent"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListTeamInvitations_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/Invitation"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "EmailTeamInvitation_request" : {
        "properties" : {
          "email" : {
            "format" : "email",
            "type" : "string"
          },
          "role" : {
            "enum" : [ "admin", "member" ],
            "type" : "string"
          }
        },
        "required" : [ "email", "role" ]
      },
      "DeleteTeamInvitation_request" : {
        "properties" : {
          "email" : {
            "format" : "email",
            "type" : "string"
          }
        },
        "required" : [ "email" ]
      },
      "AcceptTeamInvitation_request" : {
        "properties" : {
          "token" : {
            "format" : "uuid",
            "type" : "string"
          }
        },
        "required" : [ "token" ]
      },
      "ListSubscriptionOrdersByTeam_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/TeamSubscriptionOrder"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListUsersByTeam_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "UpdateCurrentUser_request" : {
        "additionalProperties" : { },
        "properties" : {
          "name" : {
            "description" : "The user's name",
            "maxLength" : 255,
            "minLength" : 1
          }
        }
      },
      "ListCurrentUserInvitations_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/InvitationWithToken"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "GetCurrentUserMemberships_200_response" : {
        "properties" : {
          "items" : {
            "example" : [ {
              "role" : "admin",
              "team" : {
                "created_at" : "2017-07-14T16:53:42Z",
                "name" : "cloudquery",
                "display_name" : "CloudQuery",
                "plan" : "free",
                "is_trial_active" : false
              }
            } ],
            "items" : {
              "$ref" : "#/components/schemas/MembershipWithTeam"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListTeamAPIKeys_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/APIKey"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "CreateTeamAPIKey_request" : {
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/APIKeyName"
          },
          "expires_at" : {
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "expires_at", "name" ]
      },
      "ListSyncSources_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/SyncSource"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListSyncDestinations_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/SyncDestination"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListSyncs_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/Sync"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListSyncRuns_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/SyncRun"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "UpdateSyncRun_request" : {
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/SyncRunStatus"
          },
          "status_reason" : {
            "$ref" : "#/components/schemas/SyncRunStatusReason"
          }
        }
      },
      "CreateSyncRunProgress_request" : {
        "properties" : {
          "rows" : {
            "description" : "Number of rows synced so far",
            "format" : "int64",
            "type" : "integer"
          },
          "warnings" : {
            "description" : "Number of warnings encountered so far",
            "format" : "int64",
            "type" : "integer"
          },
          "errors" : {
            "description" : "Number of errors encountered so far",
            "format" : "int64",
            "type" : "integer"
          },
          "status" : {
            "$ref" : "#/components/schemas/SyncRunStatus"
          }
        },
        "required" : [ "errors", "rows", "warnings" ]
      },
      "Sync_Run_Logs" : {
        "additionalProperties" : { },
        "properties" : {
          "location" : {
            "description" : "The location to download the sync run logs from",
            "format" : "uri"
          }
        },
        "required" : [ "location" ],
        "title" : "Sync Run Logs"
      },
      "GetSyncRunConnectorIdentity_200_response" : {
        "properties" : {
          "aws" : {
            "$ref" : "#/components/schemas/ConnectorIdentityResponseAWS"
          }
        }
      },
      "GetSyncRunConnectorCredentials_200_response" : {
        "properties" : {
          "aws" : {
            "$ref" : "#/components/schemas/ConnectorCredentialsResponseAWS"
          },
          "oauth" : {
            "$ref" : "#/components/schemas/ConnectorCredentialsResponseOAuth"
          }
        }
      },
      "UpdateSyncTestConnection_request" : {
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/SyncTestConnectionStatus"
          },
          "failure_reason" : {
            "description" : "Reason for failure",
            "example" : "password authentication failed for user \"exampleuser\"",
            "type" : "string"
          },
          "failure_code" : {
            "description" : "Code for failure",
            "example" : "INVALID_CREDENTIALS",
            "type" : "string"
          }
        },
        "required" : [ "status" ]
      },
      "GetManagedDatabases_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/ManagedDatabase"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListConnectors_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/Connector"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "UsageIncrease_tables_inner" : {
        "properties" : {
          "name" : {
            "description" : "The name of the table.",
            "example" : "my_table",
            "type" : "string"
          },
          "rows" : {
            "description" : "The additional rows used by the table.",
            "example" : 100,
            "minimum" : 0,
            "type" : "integer"
          }
        },
        "required" : [ "name", "rows" ]
      },
      "UsageSummary_metadata" : {
        "additionalProperties" : false,
        "description" : "Additional metadata about the usage summary. This may include information about the time range, the aggregation period, or other details.",
        "properties" : {
          "start" : {
            "description" : "The inclusive start of the query time range.",
            "format" : "date-time"
          },
          "end" : {
            "description" : "The exclusive end of the query time range.",
            "format" : "date-time"
          },
          "aggregation_period" : {
            "description" : "The aggregation period to sum data over. In other words, data will be returned at this granularity.",
            "enum" : [ "day", "month" ]
          },
          "metrics" : {
            "default" : [ "paid_rows" ],
            "description" : "List of metrics included in the response.",
            "items" : {
              "enum" : [ "paid_rows", "cloud_egress_bytes", "cloud_vcpu_seconds", "cloud_vram_byte_seconds" ]
            }
          }
        },
        "required" : [ "aggregation_period", "end", "metrics", "start" ]
      },
      "SpendSummary_metadata" : {
        "additionalProperties" : false,
        "description" : "Additional metadata about the spend summary. This may include information about the time range, the aggregation period, or other details.",
        "properties" : {
          "start" : {
            "description" : "The inclusive start of the query time range.",
            "format" : "date-time"
          },
          "end" : {
            "description" : "The exclusive end of the query time range.",
            "format" : "date-time"
          }
        },
        "required" : [ "end", "start" ]
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "scheme" : "bearer",
        "type" : "http"
      },
      "basicAuth" : {
        "scheme" : "basic",
        "type" : "http"
      }
    }
  }
}